
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  00000f76  2**0
                  ALLOC
  3 .stab         000036b4  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000383d  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00007e69  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000083be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00008861  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000887b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 06 	call	0xcc6	; 0xcc6 <main>
  8a:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setupPinDirection>:
 * Parameters:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - direction: Desired direction of the pin (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_setupPinDirection+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02
  a2:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT) {
  a4:	8a 81       	ldd	r24, Y+2	; 0x02
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	08 f0       	brcs	.+2      	; 0xac <GPIO_setupPinDirection+0x1a>
  aa:	52 c0       	rjmp	.+164    	; 0x150 <GPIO_setupPinDirection+0xbe>
        if (direction == PIN_OUTPUT) {
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	31 f5       	brne	.+76     	; 0xfe <GPIO_setupPinDirection+0x6c>
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	80 5a       	subi	r24, 0xA0	; 160
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	48 2f       	mov	r20, r24
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	28 2f       	mov	r18, r24
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_setupPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	2a 95       	dec	r18
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_setupPinDirection+0x46>
  e0:	24 2f       	mov	r18, r20
  e2:	28 2b       	or	r18, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	80 5a       	subi	r24, 0xA0	; 160
  f0:	9f 4f       	sbci	r25, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
        } else if (direction == PIN_INPUT) {
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
        }
    }
}
  fc:	29 c0       	rjmp	.+82     	; 0x150 <GPIO_setupPinDirection+0xbe>
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    if (pin_num < NUM_OF_PINS_PER_PORT) {
        if (direction == PIN_OUTPUT) {
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
        } else if (direction == PIN_INPUT) {
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	88 23       	and	r24, r24
 102:	31 f5       	brne	.+76     	; 0x150 <GPIO_setupPinDirection+0xbe>
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	80 5a       	subi	r24, 0xA0	; 160
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_setupPinDirection+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	2a 95       	dec	r18
 130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_setupPinDirection+0x98>
 132:	80 95       	com	r24
 134:	24 2f       	mov	r18, r20
 136:	28 23       	and	r18, r24
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	80 5a       	subi	r24, 0xA0	; 160
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
        }
    }
}
 150:	00 00       	nop
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <GPIO_setupPinDirectionR>:
 * - last_pin_num: Last pin number in the range (0 to NUM_OF_PINS_PER_PORT-1).
 * - port_num: Port number where the pins are located.
 * - direction: Desired direction of the pins (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <GPIO_setupPinDirectionR+0x6>
 164:	00 d0       	rcall	.+0      	; 0x166 <GPIO_setupPinDirectionR+0x8>
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	8a 83       	std	Y+2, r24	; 0x02
 16e:	6b 83       	std	Y+3, r22	; 0x03
 170:	4c 83       	std	Y+4, r20	; 0x04
 172:	2d 83       	std	Y+5, r18	; 0x05
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	38 f5       	brcc	.+78     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	20 f5       	brcc	.+72     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	08 f5       	brcc	.+66     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
        if (last_pin_num > first_pin_num) {
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	89 17       	cp	r24, r25
 18c:	e8 f4       	brcc	.+58     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
 18e:	19 82       	std	Y+1, r1	; 0x01
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <GPIO_setupPinDirectionR+0x4a>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	89 0f       	add	r24, r25
 198:	4d 81       	ldd	r20, Y+5	; 0x05
 19a:	68 2f       	mov	r22, r24
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
        if (last_pin_num > first_pin_num) {
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	48 2f       	mov	r20, r24
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ba 01       	movw	r22, r20
 1bc:	68 1b       	sub	r22, r24
 1be:	79 0b       	sbc	r23, r25
 1c0:	cb 01       	movw	r24, r22
 1c2:	82 17       	cp	r24, r18
 1c4:	93 07       	cpc	r25, r19
 1c6:	2c f7       	brge	.-54     	; 0x192 <GPIO_setupPinDirectionR+0x34>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
            }
        }
    }
}
 1c8:	00 00       	nop
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <GPIO_writePin>:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - value: Logic level to be written (LOGIC_HIGH or LOGIC_LOW).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <GPIO_writePin+0x6>
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	6a 83       	std	Y+2, r22	; 0x02
 1ea:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <GPIO_writePin+0x1a>
 1f2:	56 c0       	rjmp	.+172    	; 0x2a0 <GPIO_writePin+0xc6>
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <GPIO_writePin+0x22>
 1fa:	52 c0       	rjmp	.+164    	; 0x2a0 <GPIO_writePin+0xc6>
        if (value == LOGIC_HIGH) {
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	31 f5       	brne	.+76     	; 0x24e <GPIO_writePin+0x74>
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 59       	subi	r24, 0x98	; 152
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <GPIO_writePin+0x52>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <GPIO_writePin+0x4e>
 230:	24 2f       	mov	r18, r20
 232:	28 2b       	or	r18, r24
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	88 2f       	mov	r24, r24
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 59       	subi	r24, 0x98	; 152
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	fc 01       	movw	r30, r24
 244:	80 81       	ld	r24, Z
 246:	91 81       	ldd	r25, Z+1	; 0x01
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
        } else if (value == LOGIC_LOW) {
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
        }
    }
}
 24c:	29 c0       	rjmp	.+82     	; 0x2a0 <GPIO_writePin+0xc6>
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
        if (value == LOGIC_HIGH) {
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
        } else if (value == LOGIC_LOW) {
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	31 f5       	brne	.+76     	; 0x2a0 <GPIO_writePin+0xc6>
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 59       	subi	r24, 0x98	; 152
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	fc 01       	movw	r30, r24
 26a:	80 81       	ld	r24, Z
 26c:	48 2f       	mov	r20, r24
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <GPIO_writePin+0xa4>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	2a 95       	dec	r18
 280:	e2 f7       	brpl	.-8      	; 0x27a <GPIO_writePin+0xa0>
 282:	80 95       	com	r24
 284:	24 2f       	mov	r18, r20
 286:	28 23       	and	r18, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 59       	subi	r24, 0x98	; 152
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
        }
    }
}
 2a0:	00 00       	nop
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <GPIO_readPin>:
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * Returns:
 * - Logic level of the pin (LOGIC_HIGH or LOGIC_LOW).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <GPIO_readPin+0x6>
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	8a 83       	std	Y+2, r24	; 0x02
 2bc:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
 2be:	19 82       	std	Y+1, r1	; 0x01

    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	f8 f4       	brcc	.+62     	; 0x304 <GPIO_readPin+0x56>
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	e0 f4       	brcc	.+56     	; 0x304 <GPIO_readPin+0x56>
        if (READ_REG[port_num]->byte & (1 << pin_num)) {
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	80 59       	subi	r24, 0x90	; 144
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	fc 01       	movw	r30, r24
 2dc:	80 81       	ld	r24, Z
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	fc 01       	movw	r30, r24
 2e2:	80 81       	ld	r24, Z
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_readPin+0x46>
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	2a 95       	dec	r18
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_readPin+0x42>
 2f8:	81 70       	andi	r24, 0x01	; 1
 2fa:	99 27       	eor	r25, r25
 2fc:	89 2b       	or	r24, r25
 2fe:	11 f0       	breq	.+4      	; 0x304 <GPIO_readPin+0x56>
            pin_value = LOGIC_HIGH; // Pin is logic high
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return pin_value;
 304:	89 81       	ldd	r24, Y+1	; 0x01
}
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <GPIO_setupPortDirection>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - direction: Desired direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	00 d0       	rcall	.+0      	; 0x318 <GPIO_setupPortDirection+0x6>
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	84 30       	cpi	r24, 0x04	; 4
 324:	68 f4       	brcc	.+26     	; 0x340 <GPIO_setupPortDirection+0x2e>
        DIRECTION_REG[port_num]->byte = direction; // Set port direction
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	80 5a       	subi	r24, 0xA0	; 160
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	fc 01       	movw	r30, r24
 336:	80 81       	ld	r24, Z
 338:	91 81       	ldd	r25, Z+1	; 0x01
 33a:	2a 81       	ldd	r18, Y+2	; 0x02
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
    }
}
 340:	00 00       	nop
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <GPIO_writePort>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - value: Value to be written to the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	00 d0       	rcall	.+0      	; 0x352 <GPIO_writePort+0x6>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	68 f4       	brcc	.+26     	; 0x37a <GPIO_writePort+0x2e>
        WRITE_REG[port_num]->byte = value; // Write value to port
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 59       	subi	r24, 0x98	; 152
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	91 81       	ldd	r25, Z+1	; 0x01
 374:	2a 81       	ldd	r18, Y+2	; 0x02
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
    }
}
 37a:	00 00       	nop
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <GPIO_readPort>:
 * - port_num: Port number to read from.
 * Returns:
 * - Value read from the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <GPIO_readPort+0x6>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
 392:	19 82       	std	Y+1, r1	; 0x01

    if (port_num < NUM_OF_PORTS) {
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	68 f4       	brcc	.+26     	; 0x3b4 <GPIO_readPort+0x2e>
        value = READ_REG[port_num]->byte; // Read value from port
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	80 59       	subi	r24, 0x90	; 144
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	91 81       	ldd	r25, Z+1	; 0x01
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <PWM_Timer0_Start>:
#include "pwm.h"

PWM_Prescaler prescaler = F_CPU8;

void PWM_Timer0_Start(uint8 duty_cycle)
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	1f 92       	push	r1
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	89 83       	std	Y+1, r24	; 0x01
    /* Start Timer 0 counting from 0 */
    TIMER0_START_FROM(0);
 3cc:	82 e5       	ldi	r24, 0x52	; 82
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	10 82       	st	Z, r1

    /* Set the PWM duty cycle by calculating the value for the OCR0 register
       (duty_cycle is provided as a percentage, so it's scaled to 0-255) */
    TIMER0_SET_DUTY_CYCLE(duty_cycle);
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	4f ef       	ldi	r20, 0xFF	; 255
 3dc:	48 9f       	mul	r20, r24
 3de:	90 01       	movw	r18, r0
 3e0:	49 9f       	mul	r20, r25
 3e2:	30 0d       	add	r19, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	c9 01       	movw	r24, r18
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	9c 01       	movw	r18, r24
 3f2:	ab e7       	ldi	r26, 0x7B	; 123
 3f4:	b4 e1       	ldi	r27, 0x14	; 20
 3f6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__umulhisi3>
 3fa:	9c 01       	movw	r18, r24
 3fc:	36 95       	lsr	r19
 3fe:	27 95       	ror	r18
 400:	8c e5       	ldi	r24, 0x5C	; 92
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18

    /* Set the direction of the PWM output pin (OC0) to output */
    GPIO_setupPinDirection(PWM_OC0_PORT, PWM_OC0_PIN, PIN_OUTPUT);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

    /* Configure Timer 0 for Fast PWM mode with non-inverted output */
    TIMER0_FAST_PWM_MODE;
 412:	83 e5       	ldi	r24, 0x53	; 83
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	20 81       	ld	r18, Z
 41a:	83 e5       	ldi	r24, 0x53	; 83
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	28 66       	ori	r18, 0x68	; 104
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18

    /* Start Timer 0 with a prescaler of 8 */
    TIMER0_PRESCALER(prescaler);
 424:	83 e5       	ldi	r24, 0x53	; 83
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	fc 01       	movw	r30, r24
 42a:	30 81       	ld	r19, Z
 42c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <prescaler>
 430:	28 2f       	mov	r18, r24
 432:	27 70       	andi	r18, 0x07	; 7
 434:	83 e5       	ldi	r24, 0x53	; 83
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	23 2b       	or	r18, r19
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
}
 43e:	00 00       	nop
 440:	0f 90       	pop	r0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <__vector_7>:
/*******************************************************************************
 *                        Interrupt Service Routine (ISR)                      *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
 472:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 476:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 47a:	89 2b       	or	r24, r25
 47c:	31 f0       	breq	.+12     	; 0x48a <__vector_7+0x42>
    {
        (*g_callBackPtr)();
 47e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 482:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 486:	fc 01       	movw	r30, r24
 488:	09 95       	icall
    }
}
 48a:	00 00       	nop
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <Timer1_setCallBack>:
/*******************************************************************************
 *                              Functions Definitions                           *
 *******************************************************************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <Timer1_setCallBack+0x6>
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01
	 g_callBackPtr = a_ptr;
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 4c8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
}
 4cc:	00 00       	nop
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <Timer1_init>:

void Timer1_init(const Timer_ConfigType * Config_Ptr)
{
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	00 d0       	rcall	.+0      	; 0x4de <Timer1_init+0x6>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	9a 83       	std	Y+2, r25	; 0x02
 4e4:	89 83       	std	Y+1, r24	; 0x01
    /* Clear Timer control registers */
    TCCR1A = 0;
 4e6:	8f e4       	ldi	r24, 0x4F	; 79
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	10 82       	st	Z, r1
    TCCR1B = 0;
 4ee:	8e e4       	ldi	r24, 0x4E	; 78
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	10 82       	st	Z, r1

    /* Set Timer initial value */
    TCNT1 = Config_Ptr->initial_value;
 4f6:	8c e4       	ldi	r24, 0x4C	; 76
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	29 81       	ldd	r18, Y+1	; 0x01
 4fc:	3a 81       	ldd	r19, Y+2	; 0x02
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	31 81       	ldd	r19, Z+1	; 0x01
 504:	fc 01       	movw	r30, r24
 506:	31 83       	std	Z+1, r19	; 0x01
 508:	20 83       	st	Z, r18

    /* Switch statement for the pre-scaler configuration */
    switch (Config_Ptr->prescaler) {
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	9a 81       	ldd	r25, Y+2	; 0x02
 50e:	fc 01       	movw	r30, r24
 510:	84 81       	ldd	r24, Z+4	; 0x04
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	91 05       	cpc	r25, r1
 51a:	81 f0       	breq	.+32     	; 0x53c <Timer1_init+0x64>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	91 05       	cpc	r25, r1
 520:	b9 f0       	breq	.+46     	; 0x550 <Timer1_init+0x78>
 522:	89 2b       	or	r24, r25
 524:	09 f0       	breq	.+2      	; 0x528 <Timer1_init+0x50>
            break;
        case F_CPU_1024:
            TCCR1B |= (1 << CS12) | (1 << CS10);
            break;
        default:
            break;
 526:	1e c0       	rjmp	.+60     	; 0x564 <Timer1_init+0x8c>
    TCNT1 = Config_Ptr->initial_value;

    /* Switch statement for the pre-scaler configuration */
    switch (Config_Ptr->prescaler) {
        case F_CPU_8:
            TCCR1B |= (1 << CS11);
 528:	8e e4       	ldi	r24, 0x4E	; 78
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	fc 01       	movw	r30, r24
 52e:	20 81       	ld	r18, Z
 530:	8e e4       	ldi	r24, 0x4E	; 78
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	22 60       	ori	r18, 0x02	; 2
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
            break;
 53a:	14 c0       	rjmp	.+40     	; 0x564 <Timer1_init+0x8c>
        case F_CPU_64:
            TCCR1B |= (1 << CS11) | (1 << CS10);
 53c:	8e e4       	ldi	r24, 0x4E	; 78
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	20 81       	ld	r18, Z
 544:	8e e4       	ldi	r24, 0x4E	; 78
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	23 60       	ori	r18, 0x03	; 3
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18
            break;
 54e:	0a c0       	rjmp	.+20     	; 0x564 <Timer1_init+0x8c>
        case F_CPU_1024:
            TCCR1B |= (1 << CS12) | (1 << CS10);
 550:	8e e4       	ldi	r24, 0x4E	; 78
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	fc 01       	movw	r30, r24
 556:	20 81       	ld	r18, Z
 558:	8e e4       	ldi	r24, 0x4E	; 78
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	25 60       	ori	r18, 0x05	; 5
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
            break;
 562:	00 00       	nop
        default:
            break;
    }

    /* Switch statement for setting the correct callback function for different modes */
    switch (Config_Ptr->mode) {
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
 568:	fc 01       	movw	r30, r24
 56a:	85 81       	ldd	r24, Z+5	; 0x05
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 05       	cpc	r25, r1
 574:	d1 f1       	breq	.+116    	; 0x5ea <Timer1_init+0x112>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	91 05       	cpc	r25, r1
 57a:	19 f0       	breq	.+6      	; 0x582 <Timer1_init+0xaa>
 57c:	89 2b       	or	r24, r25
 57e:	39 f1       	breq	.+78     	; 0x5ce <Timer1_init+0xf6>
            TCCR1A = 0;                // Clear Timer on Compare Match (CTC) mode
            TCCR1B |= (1 << WGM12);    // CTC mode
            OCR1A = Config_Ptr->compare_value;      // Set the compare value
            break;
        default:
            break;
 580:	55 c0       	rjmp	.+170    	; 0x62c <Timer1_init+0x154>
    }

    /* Switch statement for setting the correct callback function for different modes */
    switch (Config_Ptr->mode) {
        case PWM_MODE:
            TIMSK |= (1 << OCIE1A);    // Enable Output Compare A Match Interrupt
 582:	89 e5       	ldi	r24, 0x59	; 89
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	fc 01       	movw	r30, r24
 588:	20 81       	ld	r18, Z
 58a:	89 e5       	ldi	r24, 0x59	; 89
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	20 61       	ori	r18, 0x10	; 16
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
            TCCR1A |= (1 << WGM11) | (1 << COM1A1); // Configure for Fast PWM mode, non-inverted
 594:	8f e4       	ldi	r24, 0x4F	; 79
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	fc 01       	movw	r30, r24
 59a:	20 81       	ld	r18, Z
 59c:	8f e4       	ldi	r24, 0x4F	; 79
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	22 68       	ori	r18, 0x82	; 130
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
            TCCR1B |= (1 << WGM12) | (1 << WGM13);  // Configure for Fast PWM mode
 5a6:	8e e4       	ldi	r24, 0x4E	; 78
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 81       	ld	r18, Z
 5ae:	8e e4       	ldi	r24, 0x4E	; 78
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	28 61       	ori	r18, 0x18	; 24
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18
            OCR1A = Config_Ptr->compare_value;      // Set the duty cycle
 5b8:	8a e4       	ldi	r24, 0x4A	; 74
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	29 81       	ldd	r18, Y+1	; 0x01
 5be:	3a 81       	ldd	r19, Y+2	; 0x02
 5c0:	f9 01       	movw	r30, r18
 5c2:	22 81       	ldd	r18, Z+2	; 0x02
 5c4:	33 81       	ldd	r19, Z+3	; 0x03
 5c6:	fc 01       	movw	r30, r24
 5c8:	31 83       	std	Z+1, r19	; 0x01
 5ca:	20 83       	st	Z, r18
            break;
 5cc:	2f c0       	rjmp	.+94     	; 0x62c <Timer1_init+0x154>
        case NORMAL_MODE:
            TIMSK |= (1 << TOIE1);     // Enable Overflow Interrupt
 5ce:	89 e5       	ldi	r24, 0x59	; 89
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 81       	ld	r18, Z
 5d6:	89 e5       	ldi	r24, 0x59	; 89
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	24 60       	ori	r18, 0x04	; 4
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
            TCCR1A = 0;                // Normal mode
 5e0:	8f e4       	ldi	r24, 0x4F	; 79
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	10 82       	st	Z, r1
            break;
 5e8:	21 c0       	rjmp	.+66     	; 0x62c <Timer1_init+0x154>
        case COMPARE_MODE:
            TIMSK |= (1 << OCIE1A);    // Enable Output Compare A Match Interrupt
 5ea:	89 e5       	ldi	r24, 0x59	; 89
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 81       	ld	r18, Z
 5f2:	89 e5       	ldi	r24, 0x59	; 89
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	20 61       	ori	r18, 0x10	; 16
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18
            TCCR1A = 0;                // Clear Timer on Compare Match (CTC) mode
 5fc:	8f e4       	ldi	r24, 0x4F	; 79
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	fc 01       	movw	r30, r24
 602:	10 82       	st	Z, r1
            TCCR1B |= (1 << WGM12);    // CTC mode
 604:	8e e4       	ldi	r24, 0x4E	; 78
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	fc 01       	movw	r30, r24
 60a:	20 81       	ld	r18, Z
 60c:	8e e4       	ldi	r24, 0x4E	; 78
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	28 60       	ori	r18, 0x08	; 8
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
            OCR1A = Config_Ptr->compare_value;      // Set the compare value
 616:	8a e4       	ldi	r24, 0x4A	; 74
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	29 81       	ldd	r18, Y+1	; 0x01
 61c:	3a 81       	ldd	r19, Y+2	; 0x02
 61e:	f9 01       	movw	r30, r18
 620:	22 81       	ldd	r18, Z+2	; 0x02
 622:	33 81       	ldd	r19, Z+3	; 0x03
 624:	fc 01       	movw	r30, r24
 626:	31 83       	std	Z+1, r19	; 0x01
 628:	20 83       	st	Z, r18
            break;
 62a:	00 00       	nop
        default:
            break;
    }
}
 62c:	00 00       	nop
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <Timer1_deinit>:

void Timer1_deinit(void)
{
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
 640:	8c e4       	ldi	r24, 0x4C	; 76
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	11 82       	std	Z+1, r1	; 0x01
 648:	10 82       	st	Z, r1
	TCCR1B = 0;
 64a:	8e e4       	ldi	r24, 0x4E	; 78
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	fc 01       	movw	r30, r24
 650:	10 82       	st	Z, r1
}
 652:	00 00       	nop
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <TWI_init>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

void TWI_init(TWI_ConfigType* config)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	00 d0       	rcall	.+0      	; 0x660 <TWI_init+0x6>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	9a 83       	std	Y+2, r25	; 0x02
 666:	89 83       	std	Y+1, r24	; 0x01
    /* Set the bit rate for TWI communication */
    TWI_BIT_RATE(config->bitRate);
 668:	81 e2       	ldi	r24, 0x21	; 33
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fc 01       	movw	r30, r24
 66e:	80 81       	ld	r24, Z
 670:	28 2f       	mov	r18, r24
 672:	2c 7f       	andi	r18, 0xFC	; 252
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	9a 81       	ldd	r25, Y+2	; 0x02
 678:	fc 01       	movw	r30, r24
 67a:	81 81       	ldd	r24, Z+1	; 0x01
 67c:	83 70       	andi	r24, 0x03	; 3
 67e:	28 2b       	or	r18, r24
 680:	81 e2       	ldi	r24, 0x21	; 33
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
 688:	80 e2       	ldi	r24, 0x20	; 32
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	22 e0       	ldi	r18, 0x02	; 2
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18

    /* Set the slave address */
    TWAR = config->address;
 692:	82 e2       	ldi	r24, 0x22	; 34
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	29 81       	ldd	r18, Y+1	; 0x01
 698:	3a 81       	ldd	r19, Y+2	; 0x02
 69a:	f9 01       	movw	r30, r18
 69c:	20 81       	ld	r18, Z
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18

    /* Enable the TWI module */
    TWCR = (1 << TWEN);
 6a2:	86 e5       	ldi	r24, 0x56	; 86
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	24 e0       	ldi	r18, 0x04	; 4
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18
}
 6ac:	00 00       	nop
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <TWI_start>:

void TWI_start(void)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
    /* Send the start condition */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 6c0:	86 e5       	ldi	r24, 0x56	; 86
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	24 ea       	ldi	r18, 0xA4	; 164
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18

    /* Wait for the start condition to be transmitted */
    while(BIT_IS_CLEAR(TWCR, TWINT));
 6ca:	00 00       	nop
 6cc:	86 e5       	ldi	r24, 0x56	; 86
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	88 23       	and	r24, r24
 6d6:	d4 f7       	brge	.-12     	; 0x6cc <TWI_start+0x14>
}
 6d8:	00 00       	nop
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <TWI_stop>:

void TWI_stop(void)
{
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
    /* Send the stop condition */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 6e8:	86 e5       	ldi	r24, 0x56	; 86
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	24 e9       	ldi	r18, 0x94	; 148
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
}
 6f2:	00 00       	nop
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	1f 92       	push	r1
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	89 83       	std	Y+1, r24	; 0x01
    /* Load data into TWI data register */
    TWDR = data;
 706:	83 e2       	ldi	r24, 0x23	; 35
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	29 81       	ldd	r18, Y+1	; 0x01
 70c:	fc 01       	movw	r30, r24
 70e:	20 83       	st	Z, r18

    /* Start data transmission */
    TWCR = (1 << TWINT) | (1 << TWEN);
 710:	86 e5       	ldi	r24, 0x56	; 86
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	24 e8       	ldi	r18, 0x84	; 132
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18

    /* Wait for the data transmission to complete */
    while(BIT_IS_CLEAR(TWCR, TWINT));
 71a:	00 00       	nop
 71c:	86 e5       	ldi	r24, 0x56	; 86
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	88 23       	and	r24, r24
 726:	d4 f7       	brge	.-12     	; 0x71c <TWI_writeByte+0x22>
}
 728:	00 00       	nop
 72a:	0f 90       	pop	r0
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
    /* Enable ACK and start data reception */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 73a:	86 e5       	ldi	r24, 0x56	; 86
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	24 ec       	ldi	r18, 0xC4	; 196
 740:	fc 01       	movw	r30, r24
 742:	20 83       	st	Z, r18

    /* Wait for the data reception to complete */
    while(BIT_IS_CLEAR(TWCR, TWINT));
 744:	00 00       	nop
 746:	86 e5       	ldi	r24, 0x56	; 86
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	fc 01       	movw	r30, r24
 74c:	80 81       	ld	r24, Z
 74e:	88 23       	and	r24, r24
 750:	d4 f7       	brge	.-12     	; 0x746 <TWI_readByteWithACK+0x14>

    /* Return the received data */
    return TWDR;
 752:	83 e2       	ldi	r24, 0x23	; 35
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	fc 01       	movw	r30, r24
 758:	80 81       	ld	r24, Z
}
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
    /* Start data reception without sending ACK */
    TWCR = (1 << TWINT) | (1 << TWEN);
 768:	86 e5       	ldi	r24, 0x56	; 86
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	24 e8       	ldi	r18, 0x84	; 132
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18

    /* Wait for the data reception to complete */
    while(BIT_IS_CLEAR(TWCR, TWINT));
 772:	00 00       	nop
 774:	86 e5       	ldi	r24, 0x56	; 86
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	fc 01       	movw	r30, r24
 77a:	80 81       	ld	r24, Z
 77c:	88 23       	and	r24, r24
 77e:	d4 f7       	brge	.-12     	; 0x774 <TWI_readByteWithNACK+0x14>

    /* Return the received data */
    return TWDR;
 780:	83 e2       	ldi	r24, 0x23	; 35
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	fc 01       	movw	r30, r24
 786:	80 81       	ld	r24, Z
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
    /* Return the status register value */
    return TWI_STATUS_REG;
 796:	81 e2       	ldi	r24, 0x21	; 33
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	fc 01       	movw	r30, r24
 79c:	80 81       	ld	r24, Z
 79e:	88 7f       	andi	r24, 0xF8	; 248
}
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <UART_init>:
 * This is the initialization function to configure the settings for the UART
 */

/* Initialization function of the UART Driver */
void UART_init(UART_ConfigType* Config_Ptr)
{
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <UART_init+0x6>
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <UART_init+0x8>
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	9c 83       	std	Y+4, r25	; 0x04
 7b4:	8b 83       	std	Y+3, r24	; 0x03
    /* Value to be written in UBRR Register according to baud rate */
    uint16 ubrr_value = 0;
 7b6:	1a 82       	std	Y+2, r1	; 0x02
 7b8:	19 82       	std	Y+1, r1	; 0x01

    UCSRA = (1 << U2X); /* Asynchronous with double the UART transmission speed */
 7ba:	8b e2       	ldi	r24, 0x2B	; 43
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	22 e0       	ldi	r18, 0x02	; 2
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
    UCSRB = (1 << TXEN) | (1 << RXEN); /* Tx enable and Rx enable */
 7c4:	8a e2       	ldi	r24, 0x2A	; 42
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	28 e1       	ldi	r18, 0x18	; 24
 7ca:	fc 01       	movw	r30, r24
 7cc:	20 83       	st	Z, r18

    /* Set URSEL to 1 to access UCSRC */
    UCSRC = (1 << URSEL);
 7ce:	80 e4       	ldi	r24, 0x40	; 64
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	20 e8       	ldi	r18, 0x80	; 128
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
    /* Choose the Parity */
    UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity << 4);
 7d8:	80 e4       	ldi	r24, 0x40	; 64
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	fc 01       	movw	r30, r24
 7de:	80 81       	ld	r24, Z
 7e0:	28 2f       	mov	r18, r24
 7e2:	2f 7c       	andi	r18, 0xCF	; 207
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	9c 81       	ldd	r25, Y+4	; 0x04
 7e8:	fc 01       	movw	r30, r24
 7ea:	83 81       	ldd	r24, Z+3	; 0x03
 7ec:	88 2f       	mov	r24, r24
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	82 95       	swap	r24
 7f2:	92 95       	swap	r25
 7f4:	90 7f       	andi	r25, 0xF0	; 240
 7f6:	98 27       	eor	r25, r24
 7f8:	80 7f       	andi	r24, 0xF0	; 240
 7fa:	98 27       	eor	r25, r24
 7fc:	28 2b       	or	r18, r24
 7fe:	80 e4       	ldi	r24, 0x40	; 64
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18

    /* Choose the Stop Bits */
    UCSRC = (UCSRC & ~(1 << USBS)) | (Config_Ptr->stop << USBS);
 806:	80 e4       	ldi	r24, 0x40	; 64
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	fc 01       	movw	r30, r24
 80c:	80 81       	ld	r24, Z
 80e:	28 2f       	mov	r18, r24
 810:	27 7f       	andi	r18, 0xF7	; 247
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	9c 81       	ldd	r25, Y+4	; 0x04
 816:	fc 01       	movw	r30, r24
 818:	84 81       	ldd	r24, Z+4	; 0x04
 81a:	88 2f       	mov	r24, r24
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	28 2b       	or	r18, r24
 82c:	80 e4       	ldi	r24, 0x40	; 64
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18

    /* Choose the data length */
    switch (Config_Ptr->data)
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	9c 81       	ldd	r25, Y+4	; 0x04
 838:	fc 01       	movw	r30, r24
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	91 05       	cpc	r25, r1
 844:	01 f1       	breq	.+64     	; 0x886 <__stack+0x27>
 846:	82 30       	cpi	r24, 0x02	; 2
 848:	91 05       	cpc	r25, r1
 84a:	1c f4       	brge	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84c:	89 2b       	or	r24, r25
 84e:	41 f0       	breq	.+16     	; 0x860 <__stack+0x1>
 850:	57 c0       	rjmp	.+174    	; 0x900 <__stack+0xa1>
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	91 05       	cpc	r25, r1
 856:	61 f1       	breq	.+88     	; 0x8b0 <__stack+0x51>
 858:	03 97       	sbiw	r24, 0x03	; 3
 85a:	09 f4       	brne	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85c:	3e c0       	rjmp	.+124    	; 0x8da <__stack+0x7b>
 85e:	50 c0       	rjmp	.+160    	; 0x900 <__stack+0xa1>
    {
        case FIVE_BITS:
            UCSRB &= ~(1 << UCSZ2);
 860:	8a e2       	ldi	r24, 0x2A	; 42
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	fc 01       	movw	r30, r24
 866:	20 81       	ld	r18, Z
 868:	8a e2       	ldi	r24, 0x2A	; 42
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	2b 7f       	andi	r18, 0xFB	; 251
 86e:	fc 01       	movw	r30, r24
 870:	20 83       	st	Z, r18
            UCSRC &= ~((1 << UCSZ1) | (1 << UCSZ0));
 872:	80 e4       	ldi	r24, 0x40	; 64
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	fc 01       	movw	r30, r24
 878:	20 81       	ld	r18, Z
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	29 7f       	andi	r18, 0xF9	; 249
 880:	fc 01       	movw	r30, r24
 882:	20 83       	st	Z, r18
            break;
 884:	3d c0       	rjmp	.+122    	; 0x900 <__stack+0xa1>
        case SIX_BITS:
            UCSRB &= ~(1 << UCSZ2);
 886:	8a e2       	ldi	r24, 0x2A	; 42
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	fc 01       	movw	r30, r24
 88c:	20 81       	ld	r18, Z
 88e:	8a e2       	ldi	r24, 0x2A	; 42
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	2b 7f       	andi	r18, 0xFB	; 251
 894:	fc 01       	movw	r30, r24
 896:	20 83       	st	Z, r18
            UCSRC = (UCSRC & ~(1 << UCSZ1)) | (1 << UCSZ0);
 898:	80 e4       	ldi	r24, 0x40	; 64
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	fc 01       	movw	r30, r24
 89e:	80 81       	ld	r24, Z
 8a0:	89 7f       	andi	r24, 0xF9	; 249
 8a2:	28 2f       	mov	r18, r24
 8a4:	22 60       	ori	r18, 0x02	; 2
 8a6:	80 e4       	ldi	r24, 0x40	; 64
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	fc 01       	movw	r30, r24
 8ac:	20 83       	st	Z, r18
            break;
 8ae:	28 c0       	rjmp	.+80     	; 0x900 <__stack+0xa1>
        case SEVEN_BITS:
            UCSRB &= ~(1 << UCSZ2);
 8b0:	8a e2       	ldi	r24, 0x2A	; 42
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	fc 01       	movw	r30, r24
 8b6:	20 81       	ld	r18, Z
 8b8:	8a e2       	ldi	r24, 0x2A	; 42
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	2b 7f       	andi	r18, 0xFB	; 251
 8be:	fc 01       	movw	r30, r24
 8c0:	20 83       	st	Z, r18
            UCSRC = (UCSRC & ~(1 << UCSZ0)) | (1 << UCSZ1);
 8c2:	80 e4       	ldi	r24, 0x40	; 64
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	fc 01       	movw	r30, r24
 8c8:	80 81       	ld	r24, Z
 8ca:	89 7f       	andi	r24, 0xF9	; 249
 8cc:	28 2f       	mov	r18, r24
 8ce:	24 60       	ori	r18, 0x04	; 4
 8d0:	80 e4       	ldi	r24, 0x40	; 64
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	20 83       	st	Z, r18
            break;
 8d8:	13 c0       	rjmp	.+38     	; 0x900 <__stack+0xa1>
        case EIGHT_BITS:
            UCSRB &= ~(1 << UCSZ2);
 8da:	8a e2       	ldi	r24, 0x2A	; 42
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	fc 01       	movw	r30, r24
 8e0:	20 81       	ld	r18, Z
 8e2:	8a e2       	ldi	r24, 0x2A	; 42
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	2b 7f       	andi	r18, 0xFB	; 251
 8e8:	fc 01       	movw	r30, r24
 8ea:	20 83       	st	Z, r18
            UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 8ec:	80 e4       	ldi	r24, 0x40	; 64
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	fc 01       	movw	r30, r24
 8f2:	20 81       	ld	r18, Z
 8f4:	80 e4       	ldi	r24, 0x40	; 64
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	26 60       	ori	r18, 0x06	; 6
 8fa:	fc 01       	movw	r30, r24
 8fc:	20 83       	st	Z, r18
            break;
 8fe:	00 00       	nop
    }

    /* Calculate the value to be written in UBRR Register according to baud rate */
    ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baudrate))) - 1);
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	9c 81       	ldd	r25, Y+4	; 0x04
 904:	fc 01       	movw	r30, r24
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	cc 01       	movw	r24, r24
 90c:	a0 e0       	ldi	r26, 0x00	; 0
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	aa 1f       	adc	r26, r26
 91e:	bb 1f       	adc	r27, r27
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	aa 1f       	adc	r26, r26
 926:	bb 1f       	adc	r27, r27
 928:	9c 01       	movw	r18, r24
 92a:	ad 01       	movw	r20, r26
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	92 e1       	ldi	r25, 0x12	; 18
 930:	aa e7       	ldi	r26, 0x7A	; 122
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	bc 01       	movw	r22, r24
 936:	cd 01       	movw	r24, r26
 938:	0e 94 2c 07 	call	0xe58	; 0xe58 <__udivmodsi4>
 93c:	da 01       	movw	r26, r20
 93e:	c9 01       	movw	r24, r18
 940:	01 97       	sbiw	r24, 0x01	; 1
 942:	9a 83       	std	Y+2, r25	; 0x02
 944:	89 83       	std	Y+1, r24	; 0x01

    /* Write the UBRR value */
    UBRRH = (uint8)(ubrr_value >> 8);
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	9a 81       	ldd	r25, Y+2	; 0x02
 94a:	29 2f       	mov	r18, r25
 94c:	33 27       	eor	r19, r19
 94e:	80 e4       	ldi	r24, 0x40	; 64
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	fc 01       	movw	r30, r24
 954:	20 83       	st	Z, r18
    UBRRL = (uint8)ubrr_value;
 956:	89 e2       	ldi	r24, 0x29	; 41
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	29 81       	ldd	r18, Y+1	; 0x01
 95c:	fc 01       	movw	r30, r24
 95e:	20 83       	st	Z, r18
}
 960:	00 00       	nop
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <UART_sendByte>:

/* Function responsible for sending a byte to another UART device. */
void UART_sendByte(const uint8 data)
{
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	1f 92       	push	r1
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
 97a:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for the UDRE Flag to be set indicating that the UDR register is empty */
    while (!(UCSRA & (1 << UDRE)));
 97c:	00 00       	nop
 97e:	8b e2       	ldi	r24, 0x2B	; 43
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	fc 01       	movw	r30, r24
 984:	80 81       	ld	r24, Z
 986:	88 2f       	mov	r24, r24
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	80 72       	andi	r24, 0x20	; 32
 98c:	99 27       	eor	r25, r25
 98e:	89 2b       	or	r24, r25
 990:	b1 f3       	breq	.-20     	; 0x97e <UART_sendByte+0xe>

    /* Put the required data to be sent in the UDR Register */
    UDR = data;
 992:	8c e2       	ldi	r24, 0x2C	; 44
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	29 81       	ldd	r18, Y+1	; 0x01
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
}
 99c:	00 00       	nop
 99e:	0f 90       	pop	r0
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <UART_receiveByte>:

/* Function responsible for receiving a byte from another UART device. */
uint8 UART_receiveByte(void)
{
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
    /* Wait for the RXC Flag to be set indicating that the UART finished receiving the data */
    while (!(UCSRA & (1 << RXC)));
 9ae:	00 00       	nop
 9b0:	8b e2       	ldi	r24, 0x2B	; 43
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	fc 01       	movw	r30, r24
 9b6:	80 81       	ld	r24, Z
 9b8:	88 23       	and	r24, r24
 9ba:	d4 f7       	brge	.-12     	; 0x9b0 <UART_receiveByte+0xa>

    /* Read the data received from the UDR Register */
    return UDR;
 9bc:	8c e2       	ldi	r24, 0x2C	; 44
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	fc 01       	movw	r30, r24
 9c2:	80 81       	ld	r24, Z
}
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	08 95       	ret

000009ca <UART_sendString>:

/* Send the required string through UART to the other UART device. */
void UART_sendString(const uint8* str)
{
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <UART_sendString+0x6>
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	9a 83       	std	Y+2, r25	; 0x02
 9d6:	89 83       	std	Y+1, r24	; 0x01
    /* Send the whole string byte by byte */
    while (*str != '\0')
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <UART_sendString+0x26>
    {
        UART_sendByte(*str);
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	9a 81       	ldd	r25, Y+2	; 0x02
 9de:	fc 01       	movw	r30, r24
 9e0:	80 81       	ld	r24, Z
 9e2:	0e 94 b8 04 	call	0x970	; 0x970 <UART_sendByte>
        str++;
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
 9e8:	9a 81       	ldd	r25, Y+2	; 0x02
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	9a 83       	std	Y+2, r25	; 0x02
 9ee:	89 83       	std	Y+1, r24	; 0x01

/* Send the required string through UART to the other UART device. */
void UART_sendString(const uint8* str)
{
    /* Send the whole string byte by byte */
    while (*str != '\0')
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	9a 81       	ldd	r25, Y+2	; 0x02
 9f4:	fc 01       	movw	r30, r24
 9f6:	80 81       	ld	r24, Z
 9f8:	88 23       	and	r24, r24
 9fa:	79 f7       	brne	.-34     	; 0x9da <UART_sendString+0x10>
    {
        UART_sendByte(*str);
        str++;
    }
}
 9fc:	00 00       	nop
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	08 95       	ret

00000a08 <UART_receiveString>:

/* Receive the required string until the '#' symbol through UART from the other UART device. */
void UART_receiveString(uint8* str)
{
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	00 d0       	rcall	.+0      	; 0xa12 <UART_receiveString+0xa>
 a12:	1f 92       	push	r1
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
 a18:	9b 83       	std	Y+3, r25	; 0x03
 a1a:	8a 83       	std	Y+2, r24	; 0x02
    /* Counter */
    uint8 i = 0;
 a1c:	19 82       	std	Y+1, r1	; 0x01

    /* Receive first byte */
    str[i] = UART_receiveByte();
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	88 2f       	mov	r24, r24
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	2a 81       	ldd	r18, Y+2	; 0x02
 a26:	3b 81       	ldd	r19, Y+3	; 0x03
 a28:	89 01       	movw	r16, r18
 a2a:	08 0f       	add	r16, r24
 a2c:	19 1f       	adc	r17, r25
 a2e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <UART_receiveByte>
 a32:	f8 01       	movw	r30, r16
 a34:	80 83       	st	Z, r24

    while (str[i] != '#') /* # is the key for sending and receiving */
 a36:	0f c0       	rjmp	.+30     	; 0xa56 <UART_receiveString+0x4e>
    {
        /* Receive new byte from the string in the next free location */
        i++;
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	8f 5f       	subi	r24, 0xFF	; 255
 a3c:	89 83       	std	Y+1, r24	; 0x01
        str[i] = UART_receiveByte();
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	2a 81       	ldd	r18, Y+2	; 0x02
 a46:	3b 81       	ldd	r19, Y+3	; 0x03
 a48:	89 01       	movw	r16, r18
 a4a:	08 0f       	add	r16, r24
 a4c:	19 1f       	adc	r17, r25
 a4e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <UART_receiveByte>
 a52:	f8 01       	movw	r30, r16
 a54:	80 83       	st	Z, r24
    uint8 i = 0;

    /* Receive first byte */
    str[i] = UART_receiveByte();

    while (str[i] != '#') /* # is the key for sending and receiving */
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	88 2f       	mov	r24, r24
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	2a 81       	ldd	r18, Y+2	; 0x02
 a5e:	3b 81       	ldd	r19, Y+3	; 0x03
 a60:	82 0f       	add	r24, r18
 a62:	93 1f       	adc	r25, r19
 a64:	fc 01       	movw	r30, r24
 a66:	80 81       	ld	r24, Z
 a68:	83 32       	cpi	r24, 0x23	; 35
 a6a:	31 f7       	brne	.-52     	; 0xa38 <UART_receiveString+0x30>
        /* Receive new byte from the string in the next free location */
        i++;
        str[i] = UART_receiveByte();
    }

    str[i] = '\0'; /* Put the null terminator for the string */
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	88 2f       	mov	r24, r24
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	2a 81       	ldd	r18, Y+2	; 0x02
 a74:	3b 81       	ldd	r19, Y+3	; 0x03
 a76:	82 0f       	add	r24, r18
 a78:	93 1f       	adc	r25, r19
 a7a:	fc 01       	movw	r30, r24
 a7c:	10 82       	st	Z, r1
}
 a7e:	00 00       	nop
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	08 95       	ret

00000a90 <Buzzer_init>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

void Buzzer_init(void)
{
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
    /* Configure the Buzzer pin as an output pin */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
 a98:	41 e0       	ldi	r20, 0x01	; 1
 a9a:	67 e0       	ldi	r22, 0x07	; 7
 a9c:	83 e0       	ldi	r24, 0x03	; 3
 a9e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
    /* Ensure the Buzzer is off at initialization */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
 aa2:	40 e0       	ldi	r20, 0x00	; 0
 aa4:	67 e0       	ldi	r22, 0x07	; 7
 aa6:	83 e0       	ldi	r24, 0x03	; 3
 aa8:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
}
 aac:	00 00       	nop
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	08 95       	ret

00000ab4 <Buzzer_on>:

/* Turns on the Buzzer using GPIO */
void Buzzer_on(void)
{
 ab4:	cf 93       	push	r28
 ab6:	df 93       	push	r29
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	67 e0       	ldi	r22, 0x07	; 7
 ac0:	83 e0       	ldi	r24, 0x03	; 3
 ac2:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
}
 ac6:	00 00       	nop
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	08 95       	ret

00000ace <Buzzer_off>:

/* Turns off the Buzzer using GPIO */
void Buzzer_off(void)
{
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
 ad6:	40 e0       	ldi	r20, 0x00	; 0
 ad8:	67 e0       	ldi	r22, 0x07	; 7
 ada:	83 e0       	ldi	r24, 0x03	; 3
 adc:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
}
 ae0:	00 00       	nop
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <DCMotor_Init>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

void DCMotor_Init(void)
{
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
	/* Setup Direction for IN1 and IN2 to be Output pins */
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,PIN_OUTPUT);
 af0:	41 e0       	ldi	r20, 0x01	; 1
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,PIN_OUTPUT);
 afa:	41 e0       	ldi	r20, 0x01	; 1
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

	/* Stop the Motor initially */
	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
 b04:	40 e0       	ldi	r20, 0x00	; 0
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	61 e0       	ldi	r22, 0x01	; 1
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
}
 b18:	00 00       	nop
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	08 95       	ret

00000b20 <DCMotor_Rotate>:



/*Setup the direction of rotation of the motor*/
void DCMotor_Rotate(MOTOR_STATE state)
{
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	1f 92       	push	r1
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62
 b2a:	89 83       	std	Y+1, r24	; 0x01

	switch(state)
 b2c:	89 81       	ldd	r24, Y+1	; 0x01
 b2e:	88 2f       	mov	r24, r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	81 30       	cpi	r24, 0x01	; 1
 b34:	91 05       	cpc	r25, r1
 b36:	81 f0       	breq	.+32     	; 0xb58 <DCMotor_Rotate+0x38>
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	91 05       	cpc	r25, r1
 b3c:	c1 f0       	breq	.+48     	; 0xb6e <DCMotor_Rotate+0x4e>
 b3e:	89 2b       	or	r24, r25
 b40:	09 f5       	brne	.+66     	; 0xb84 <DCMotor_Rotate+0x64>
	{
		case STOP:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
 b42:	40 e0       	ldi	r20, 0x00	; 0
 b44:	60 e0       	ldi	r22, 0x00	; 0
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	61 e0       	ldi	r22, 0x01	; 1
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			break;
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <DCMotor_Rotate+0x64>
		case CW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
 b58:	40 e0       	ldi	r20, 0x00	; 0
 b5a:	60 e0       	ldi	r22, 0x00	; 0
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_HIGH);
 b62:	41 e0       	ldi	r20, 0x01	; 1
 b64:	61 e0       	ldi	r22, 0x01	; 1
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			break;
 b6c:	0b c0       	rjmp	.+22     	; 0xb84 <DCMotor_Rotate+0x64>
		case ACW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_HIGH);
 b6e:	41 e0       	ldi	r20, 0x01	; 1
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
 b78:	40 e0       	ldi	r20, 0x00	; 0
 b7a:	61 e0       	ldi	r22, 0x01	; 1
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
			break;
 b82:	00 00       	nop
	}


	PWM_Timer0_Start(100);
 b84:	84 e6       	ldi	r24, 0x64	; 100
 b86:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <PWM_Timer0_Start>
}
 b8a:	00 00       	nop
 b8c:	0f 90       	pop	r0
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	08 95       	ret

00000b94 <EEPROM_writeByte>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	00 d0       	rcall	.+0      	; 0xb9a <EEPROM_writeByte+0x6>
 b9a:	1f 92       	push	r1
 b9c:	cd b7       	in	r28, 0x3d	; 61
 b9e:	de b7       	in	r29, 0x3e	; 62
 ba0:	9a 83       	std	Y+2, r25	; 0x02
 ba2:	89 83       	std	Y+1, r24	; 0x01
 ba4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
 ba6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
 baa:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 bae:	88 30       	cpi	r24, 0x08	; 8
 bb0:	11 f0       	breq	.+4      	; 0xbb6 <EEPROM_writeByte+0x22>
        return 0;
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	26 c0       	rjmp	.+76     	; 0xc02 <EEPROM_writeByte+0x6e>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
 bb6:	89 81       	ldd	r24, Y+1	; 0x01
 bb8:	9a 81       	ldd	r25, Y+2	; 0x02
 bba:	88 0f       	add	r24, r24
 bbc:	89 2f       	mov	r24, r25
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 0b       	sbc	r25, r25
 bc2:	91 95       	neg	r25
 bc4:	8e 70       	andi	r24, 0x0E	; 14
 bc6:	80 6a       	ori	r24, 0xA0	; 160
 bc8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 bcc:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 bd0:	88 31       	cpi	r24, 0x18	; 24
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <EEPROM_writeByte+0x44>
        return 0;
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	15 c0       	rjmp	.+42     	; 0xc02 <EEPROM_writeByte+0x6e>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
 bd8:	89 81       	ldd	r24, Y+1	; 0x01
 bda:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 bde:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 be2:	88 32       	cpi	r24, 0x28	; 40
 be4:	11 f0       	breq	.+4      	; 0xbea <EEPROM_writeByte+0x56>
        return 0;
 be6:	80 e0       	ldi	r24, 0x00	; 0
 be8:	0c c0       	rjmp	.+24     	; 0xc02 <EEPROM_writeByte+0x6e>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
 bea:	8b 81       	ldd	r24, Y+3	; 0x03
 bec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 bf0:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 bf4:	88 32       	cpi	r24, 0x28	; 40
 bf6:	11 f0       	breq	.+4      	; 0xbfc <EEPROM_writeByte+0x68>
        return 0;
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	03 c0       	rjmp	.+6      	; 0xc02 <EEPROM_writeByte+0x6e>

    /* Send the Stop Bit */
    TWI_stop();
 bfc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TWI_stop>

    return 1;
 c00:	81 e0       	ldi	r24, 0x01	; 1
}
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret

00000c0e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	00 d0       	rcall	.+0      	; 0xc14 <EEPROM_readByte+0x6>
 c14:	00 d0       	rcall	.+0      	; 0xc16 <EEPROM_readByte+0x8>
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	9a 83       	std	Y+2, r25	; 0x02
 c1c:	89 83       	std	Y+1, r24	; 0x01
 c1e:	7c 83       	std	Y+4, r23	; 0x04
 c20:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
 c22:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
 c26:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 c2a:	88 30       	cpi	r24, 0x08	; 8
 c2c:	11 f0       	breq	.+4      	; 0xc32 <EEPROM_readByte+0x24>
        return 0;
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	43 c0       	rjmp	.+134    	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 c32:	89 81       	ldd	r24, Y+1	; 0x01
 c34:	9a 81       	ldd	r25, Y+2	; 0x02
 c36:	88 0f       	add	r24, r24
 c38:	89 2f       	mov	r24, r25
 c3a:	88 1f       	adc	r24, r24
 c3c:	99 0b       	sbc	r25, r25
 c3e:	91 95       	neg	r25
 c40:	8e 70       	andi	r24, 0x0E	; 14
 c42:	80 6a       	ori	r24, 0xA0	; 160
 c44:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
 c48:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 c4c:	88 31       	cpi	r24, 0x18	; 24
 c4e:	11 f0       	breq	.+4      	; 0xc54 <EEPROM_readByte+0x46>
        return 0;
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	32 c0       	rjmp	.+100    	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
 c54:	89 81       	ldd	r24, Y+1	; 0x01
 c56:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
 c5a:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 c5e:	88 32       	cpi	r24, 0x28	; 40
 c60:	11 f0       	breq	.+4      	; 0xc66 <EEPROM_readByte+0x58>
        return 0;
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	29 c0       	rjmp	.+82     	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Send the Repeated Start Bit */
    TWI_start();
 c66:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
 c6a:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 c6e:	80 31       	cpi	r24, 0x10	; 16
 c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_readByte+0x68>
        return 0;
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	21 c0       	rjmp	.+66     	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	9a 81       	ldd	r25, Y+2	; 0x02
 c7a:	88 0f       	add	r24, r24
 c7c:	89 2f       	mov	r24, r25
 c7e:	88 1f       	adc	r24, r24
 c80:	99 0b       	sbc	r25, r25
 c82:	91 95       	neg	r25
 c84:	8e 70       	andi	r24, 0x0E	; 14
 c86:	81 6a       	ori	r24, 0xA1	; 161
 c88:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
 c8c:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 c90:	80 34       	cpi	r24, 0x40	; 64
 c92:	11 f0       	breq	.+4      	; 0xc98 <EEPROM_readByte+0x8a>
        return 0;
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	10 c0       	rjmp	.+32     	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
 c98:	0e 94 b0 03 	call	0x760	; 0x760 <TWI_readByteWithNACK>
 c9c:	28 2f       	mov	r18, r24
 c9e:	8b 81       	ldd	r24, Y+3	; 0x03
 ca0:	9c 81       	ldd	r25, Y+4	; 0x04
 ca2:	fc 01       	movw	r30, r24
 ca4:	20 83       	st	Z, r18
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
 ca6:	0e 94 c7 03 	call	0x78e	; 0x78e <TWI_getStatus>
 caa:	88 35       	cpi	r24, 0x58	; 88
 cac:	11 f0       	breq	.+4      	; 0xcb2 <EEPROM_readByte+0xa4>
        return 0;
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <EEPROM_readByte+0xaa>

    /* Send the Stop Bit */
    TWI_stop();
 cb2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TWI_stop>

    return 1;
 cb6:	81 e0       	ldi	r24, 0x01	; 1
}
 cb8:	0f 90       	pop	r0
 cba:	0f 90       	pop	r0
 cbc:	0f 90       	pop	r0
 cbe:	0f 90       	pop	r0
 cc0:	df 91       	pop	r29
 cc2:	cf 91       	pop	r28
 cc4:	08 95       	ret

00000cc6 <main>:
    .prescaler = F_CPU_1024,
    .mode = COMPARE_MODE
};

int main (void)
{
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	00 d0       	rcall	.+0      	; 0xccc <main+0x6>
 ccc:	00 d0       	rcall	.+0      	; 0xcce <main+0x8>
 cce:	00 d0       	rcall	.+0      	; 0xcd0 <main+0xa>
 cd0:	1f 92       	push	r1
 cd2:	cd b7       	in	r28, 0x3d	; 61
 cd4:	de b7       	in	r29, 0x3e	; 62
    /* Enable global interrupts */
    sei();
 cd6:	78 94       	sei

    /* Set the timer callback function */
    Timer1_setCallBack(Timer_countTicks);
 cd8:	80 e0       	ldi	r24, 0x00	; 0
 cda:	97 e0       	ldi	r25, 0x07	; 7
 cdc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Timer1_setCallBack>

    /* Initialize the DC motor and buzzer */
    DCMotor_Init();
 ce0:	0e 94 74 05 	call	0xae8	; 0xae8 <DCMotor_Init>
    Buzzer_init();
 ce4:	0e 94 48 05 	call	0xa90	; 0xa90 <Buzzer_init>
     * Baud Rate: 9600 bps
     * Data size: Eight bit data
     * Error Checking: Even Parity
     * Stop bits: one
     */
    UART_ConfigType uart_config = {BAUD_RATE_9600, EIGHT_BITS, EVEN, ONE_BIT};
 ce8:	25 e0       	ldi	r18, 0x05	; 5
 cea:	ef e7       	ldi	r30, 0x7F	; 127
 cec:	f0 e0       	ldi	r31, 0x00	; 0
 cee:	ce 01       	movw	r24, r28
 cf0:	01 96       	adiw	r24, 0x01	; 1
 cf2:	dc 01       	movw	r26, r24
 cf4:	01 90       	ld	r0, Z+
 cf6:	0d 92       	st	X+, r0
 cf8:	2a 95       	dec	r18
 cfa:	e1 f7       	brne	.-8      	; 0xcf4 <main+0x2e>
    UART_init(&uart_config);
 cfc:	ce 01       	movw	r24, r28
 cfe:	01 96       	adiw	r24, 0x01	; 1
 d00:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UART_init>

    /* TWI (I2C) Configurations
     * Bit rate: 400kbps
     * EEPROM address
     */
    TWI_ConfigType twi_config = {LOC_2, TWI_400KB};
 d04:	82 e0       	ldi	r24, 0x02	; 2
 d06:	8e 83       	std	Y+6, r24	; 0x06
 d08:	81 e0       	ldi	r24, 0x01	; 1
 d0a:	8f 83       	std	Y+7, r24	; 0x07
    TWI_init(&twi_config);
 d0c:	ce 01       	movw	r24, r28
 d0e:	06 96       	adiw	r24, 0x06	; 6
 d10:	0e 94 2d 03 	call	0x65a	; 0x65a <TWI_init>

    while(1)
    {
        /* Handle received UART commands */
        switch (UART_receiveByte()) {
 d14:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <UART_receiveByte>
 d18:	88 2f       	mov	r24, r24
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	82 30       	cpi	r24, 0x02	; 2
 d1e:	91 05       	cpc	r25, r1
 d20:	79 f0       	breq	.+30     	; 0xd40 <main+0x7a>
 d22:	83 30       	cpi	r24, 0x03	; 3
 d24:	91 05       	cpc	r25, r1
 d26:	1c f4       	brge	.+6      	; 0xd2e <main+0x68>
 d28:	01 97       	sbiw	r24, 0x01	; 1
 d2a:	69 f0       	breq	.+26     	; 0xd46 <main+0x80>
            case CODE_ACTIVATE_BUZZER:
                APP_activateBuzzer();
                break;

            default:
                break;
 d2c:	12 c0       	rjmp	.+36     	; 0xd52 <main+0x8c>
    TWI_init(&twi_config);

    while(1)
    {
        /* Handle received UART commands */
        switch (UART_receiveByte()) {
 d2e:	83 30       	cpi	r24, 0x03	; 3
 d30:	91 05       	cpc	r25, r1
 d32:	19 f0       	breq	.+6      	; 0xd3a <main+0x74>
 d34:	04 97       	sbiw	r24, 0x04	; 4
 d36:	51 f0       	breq	.+20     	; 0xd4c <main+0x86>
            case CODE_ACTIVATE_BUZZER:
                APP_activateBuzzer();
                break;

            default:
                break;
 d38:	0c c0       	rjmp	.+24     	; 0xd52 <main+0x8c>
    while(1)
    {
        /* Handle received UART commands */
        switch (UART_receiveByte()) {
            case CODE_RETREIVE_PASSWORD:
                APP_sendPassword();
 d3a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <APP_sendPassword>
                break;
 d3e:	09 c0       	rjmp	.+18     	; 0xd52 <main+0x8c>

            case CODE_SAVE_PASSWORD:
                APP_savePassword();
 d40:	0e 94 ca 06 	call	0xd94	; 0xd94 <APP_savePassword>
                break;
 d44:	06 c0       	rjmp	.+12     	; 0xd52 <main+0x8c>

            case CODE_OPEN_DOOR:
                APP_openDoorHandler();
 d46:	0e 94 aa 06 	call	0xd54	; 0xd54 <APP_openDoorHandler>
                break;
 d4a:	03 c0       	rjmp	.+6      	; 0xd52 <main+0x8c>

            case CODE_ACTIVATE_BUZZER:
                APP_activateBuzzer();
 d4c:	0e 94 f0 06 	call	0xde0	; 0xde0 <APP_activateBuzzer>
                break;
 d50:	00 00       	nop
    TWI_init(&twi_config);

    while(1)
    {
        /* Handle received UART commands */
        switch (UART_receiveByte()) {
 d52:	e0 cf       	rjmp	.-64     	; 0xd14 <main+0x4e>

00000d54 <APP_openDoorHandler>:
    }
}

/* Function to handle door opening process */
void APP_openDoorHandler(void)
{
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
    DCMotor_Rotate(CW);       /* Motor opening the door */
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	0e 94 90 05 	call	0xb20	; 0xb20 <DCMotor_Rotate>
    Timer_delaySeconds(15);    /* Time for opening the door */
 d62:	8f e0       	ldi	r24, 0x0F	; 15
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Timer_delaySeconds>

    DCMotor_Rotate(STOP);     /* The door opened, so stopping motor */
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	0e 94 90 05 	call	0xb20	; 0xb20 <DCMotor_Rotate>
    Timer_delaySeconds(3);    /* The time for keeping the door open */
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Timer_delaySeconds>

    DCMotor_Rotate(ACW);      /* Motor closing the door */
 d78:	82 e0       	ldi	r24, 0x02	; 2
 d7a:	0e 94 90 05 	call	0xb20	; 0xb20 <DCMotor_Rotate>
    Timer_delaySeconds(15);    /* Time for closing the door */
 d7e:	8f e0       	ldi	r24, 0x0F	; 15
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Timer_delaySeconds>

    DCMotor_Rotate(STOP);     /* The door closed, so stopping motor */
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	0e 94 90 05 	call	0xb20	; 0xb20 <DCMotor_Rotate>
}
 d8c:	00 00       	nop
 d8e:	df 91       	pop	r29
 d90:	cf 91       	pop	r28
 d92:	08 95       	ret

00000d94 <APP_savePassword>:

/* Function to save password to EEPROM */
void APP_savePassword(void)
{
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	1f 92       	push	r1
 d9a:	cd b7       	in	r28, 0x3d	; 61
 d9c:	de b7       	in	r29, 0x3e	; 62
    uint8 password;
    password = UART_receiveByte();
 d9e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <UART_receiveByte>
 da2:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_writeByte(EEPROM_PASSWORD_LOCATION, password);
 da4:	69 81       	ldd	r22, Y+1	; 0x01
 da6:	80 e0       	ldi	r24, 0x00	; 0
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	0e 94 ca 05 	call	0xb94	; 0xb94 <EEPROM_writeByte>
}
 dae:	00 00       	nop
 db0:	0f 90       	pop	r0
 db2:	df 91       	pop	r29
 db4:	cf 91       	pop	r28
 db6:	08 95       	ret

00000db8 <APP_sendPassword>:

/* Function to send password from EEPROM via UART */
void APP_sendPassword(void)
{
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
 dbc:	1f 92       	push	r1
 dbe:	cd b7       	in	r28, 0x3d	; 61
 dc0:	de b7       	in	r29, 0x3e	; 62
    uint8 password;
    EEPROM_readByte(EEPROM_PASSWORD_LOCATION, &password);
 dc2:	ce 01       	movw	r24, r28
 dc4:	01 96       	adiw	r24, 0x01	; 1
 dc6:	bc 01       	movw	r22, r24
 dc8:	80 e0       	ldi	r24, 0x00	; 0
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 07 06 	call	0xc0e	; 0xc0e <EEPROM_readByte>
    UART_sendByte(password);
 dd0:	89 81       	ldd	r24, Y+1	; 0x01
 dd2:	0e 94 b8 04 	call	0x970	; 0x970 <UART_sendByte>
}
 dd6:	00 00       	nop
 dd8:	0f 90       	pop	r0
 dda:	df 91       	pop	r29
 ddc:	cf 91       	pop	r28
 dde:	08 95       	ret

00000de0 <APP_activateBuzzer>:

/* Function to activate the buzzer */
void APP_activateBuzzer(void)
{
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
 de4:	cd b7       	in	r28, 0x3d	; 61
 de6:	de b7       	in	r29, 0x3e	; 62
    Buzzer_on();
 de8:	0e 94 5a 05 	call	0xab4	; 0xab4 <Buzzer_on>
    Timer_delaySeconds(60);    /* Keep buzzer on for 1 second */
 dec:	8c e3       	ldi	r24, 0x3C	; 60
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Timer_delaySeconds>
    Buzzer_off();
 df4:	0e 94 67 05 	call	0xace	; 0xace <Buzzer_off>
}
 df8:	00 00       	nop
 dfa:	df 91       	pop	r29
 dfc:	cf 91       	pop	r28
 dfe:	08 95       	ret

00000e00 <Timer_countTicks>:
 *                              Timer Functions                                *
 *******************************************************************************/

/* Timer tick callback function */
void Timer_countTicks(void)
{
 e00:	cf 93       	push	r28
 e02:	df 93       	push	r29
 e04:	cd b7       	in	r28, 0x3d	; 61
 e06:	de b7       	in	r29, 0x3e	; 62
    ticks++;
 e08:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <ticks>
 e0c:	8f 5f       	subi	r24, 0xFF	; 255
 e0e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <ticks>
}
 e12:	00 00       	nop
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	08 95       	ret

00000e1a <Timer_delaySeconds>:

/* Function to create a delay in seconds using the timer */
void Timer_delaySeconds(uint16 seconds)
{
 e1a:	cf 93       	push	r28
 e1c:	df 93       	push	r29
 e1e:	00 d0       	rcall	.+0      	; 0xe20 <Timer_delaySeconds+0x6>
 e20:	cd b7       	in	r28, 0x3d	; 61
 e22:	de b7       	in	r29, 0x3e	; 62
 e24:	9a 83       	std	Y+2, r25	; 0x02
 e26:	89 83       	std	Y+1, r24	; 0x01
    Timer1_init(&timer_config);
 e28:	89 e7       	ldi	r24, 0x79	; 121
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Timer1_init>
    while(ticks != seconds);
 e30:	00 00       	nop
 e32:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <ticks>
 e36:	88 2f       	mov	r24, r24
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	29 81       	ldd	r18, Y+1	; 0x01
 e3c:	3a 81       	ldd	r19, Y+2	; 0x02
 e3e:	28 17       	cp	r18, r24
 e40:	39 07       	cpc	r19, r25
 e42:	b9 f7       	brne	.-18     	; 0xe32 <Timer_delaySeconds+0x18>
    Timer1_deinit();
 e44:	0e 94 1c 03 	call	0x638	; 0x638 <Timer1_deinit>
    ticks = 0;
 e48:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <ticks>
}
 e4c:	00 00       	nop
 e4e:	0f 90       	pop	r0
 e50:	0f 90       	pop	r0
 e52:	df 91       	pop	r29
 e54:	cf 91       	pop	r28
 e56:	08 95       	ret

00000e58 <__udivmodsi4>:
 e58:	a1 e2       	ldi	r26, 0x21	; 33
 e5a:	1a 2e       	mov	r1, r26
 e5c:	aa 1b       	sub	r26, r26
 e5e:	bb 1b       	sub	r27, r27
 e60:	fd 01       	movw	r30, r26
 e62:	0d c0       	rjmp	.+26     	; 0xe7e <__udivmodsi4_ep>

00000e64 <__udivmodsi4_loop>:
 e64:	aa 1f       	adc	r26, r26
 e66:	bb 1f       	adc	r27, r27
 e68:	ee 1f       	adc	r30, r30
 e6a:	ff 1f       	adc	r31, r31
 e6c:	a2 17       	cp	r26, r18
 e6e:	b3 07       	cpc	r27, r19
 e70:	e4 07       	cpc	r30, r20
 e72:	f5 07       	cpc	r31, r21
 e74:	20 f0       	brcs	.+8      	; 0xe7e <__udivmodsi4_ep>
 e76:	a2 1b       	sub	r26, r18
 e78:	b3 0b       	sbc	r27, r19
 e7a:	e4 0b       	sbc	r30, r20
 e7c:	f5 0b       	sbc	r31, r21

00000e7e <__udivmodsi4_ep>:
 e7e:	66 1f       	adc	r22, r22
 e80:	77 1f       	adc	r23, r23
 e82:	88 1f       	adc	r24, r24
 e84:	99 1f       	adc	r25, r25
 e86:	1a 94       	dec	r1
 e88:	69 f7       	brne	.-38     	; 0xe64 <__udivmodsi4_loop>
 e8a:	60 95       	com	r22
 e8c:	70 95       	com	r23
 e8e:	80 95       	com	r24
 e90:	90 95       	com	r25
 e92:	9b 01       	movw	r18, r22
 e94:	ac 01       	movw	r20, r24
 e96:	bd 01       	movw	r22, r26
 e98:	cf 01       	movw	r24, r30
 e9a:	08 95       	ret

00000e9c <__umulhisi3>:
 e9c:	a2 9f       	mul	r26, r18
 e9e:	b0 01       	movw	r22, r0
 ea0:	b3 9f       	mul	r27, r19
 ea2:	c0 01       	movw	r24, r0
 ea4:	a3 9f       	mul	r26, r19
 ea6:	70 0d       	add	r23, r0
 ea8:	81 1d       	adc	r24, r1
 eaa:	11 24       	eor	r1, r1
 eac:	91 1d       	adc	r25, r1
 eae:	b2 9f       	mul	r27, r18
 eb0:	70 0d       	add	r23, r0
 eb2:	81 1d       	adc	r24, r1
 eb4:	11 24       	eor	r1, r1
 eb6:	91 1d       	adc	r25, r1
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
