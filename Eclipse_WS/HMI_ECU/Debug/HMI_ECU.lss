
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800148  00800148  00001faa  2**0
                  ALLOC
  3 .stab         00003948  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d07  00000000  00000000  000058f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000085fb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000862c  2**2
                  CONTENTS, READONLY
  7 .avr.prop     00000016  00000000  00000000  00008668  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000867e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  00008b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00009007  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  00009021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 0a 	call	0x1564	; 0x1564 <main>
      8a:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setupPinDirection>:
 * Parameters:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - direction: Desired direction of the pin (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_setupPinDirection+0x6>
      98:	1f 92       	push	r1
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT) {
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	88 30       	cpi	r24, 0x08	; 8
      a8:	08 f0       	brcs	.+2      	; 0xac <GPIO_setupPinDirection+0x1a>
      aa:	52 c0       	rjmp	.+164    	; 0x150 <GPIO_setupPinDirection+0xbe>
        if (direction == PIN_OUTPUT) {
      ac:	8b 81       	ldd	r24, Y+3	; 0x03
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	31 f5       	brne	.+76     	; 0xfe <GPIO_setupPinDirection+0x6c>
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	88 2f       	mov	r24, r24
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	88 0f       	add	r24, r24
      ba:	99 1f       	adc	r25, r25
      bc:	80 5a       	subi	r24, 0xA0	; 160
      be:	9f 4f       	sbci	r25, 0xFF	; 255
      c0:	fc 01       	movw	r30, r24
      c2:	80 81       	ld	r24, Z
      c4:	91 81       	ldd	r25, Z+1	; 0x01
      c6:	fc 01       	movw	r30, r24
      c8:	80 81       	ld	r24, Z
      ca:	48 2f       	mov	r20, r24
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	28 2f       	mov	r18, r24
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_setupPinDirection+0x4a>
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	2a 95       	dec	r18
      de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_setupPinDirection+0x46>
      e0:	24 2f       	mov	r18, r20
      e2:	28 2b       	or	r18, r24
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	88 2f       	mov	r24, r24
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	88 0f       	add	r24, r24
      ec:	99 1f       	adc	r25, r25
      ee:	80 5a       	subi	r24, 0xA0	; 160
      f0:	9f 4f       	sbci	r25, 0xFF	; 255
      f2:	fc 01       	movw	r30, r24
      f4:	80 81       	ld	r24, Z
      f6:	91 81       	ldd	r25, Z+1	; 0x01
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
        } else if (direction == PIN_INPUT) {
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
        }
    }
}
      fc:	29 c0       	rjmp	.+82     	; 0x150 <GPIO_setupPinDirection+0xbe>
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    if (pin_num < NUM_OF_PINS_PER_PORT) {
        if (direction == PIN_OUTPUT) {
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
        } else if (direction == PIN_INPUT) {
      fe:	8b 81       	ldd	r24, Y+3	; 0x03
     100:	88 23       	and	r24, r24
     102:	31 f5       	brne	.+76     	; 0x150 <GPIO_setupPinDirection+0xbe>
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	88 2f       	mov	r24, r24
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	80 5a       	subi	r24, 0xA0	; 160
     110:	9f 4f       	sbci	r25, 0xFF	; 255
     112:	fc 01       	movw	r30, r24
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	fc 01       	movw	r30, r24
     11a:	80 81       	ld	r24, Z
     11c:	48 2f       	mov	r20, r24
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	28 2f       	mov	r18, r24
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_setupPinDirection+0x9c>
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	2a 95       	dec	r18
     130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_setupPinDirection+0x98>
     132:	80 95       	com	r24
     134:	24 2f       	mov	r18, r20
     136:	28 23       	and	r18, r24
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	80 5a       	subi	r24, 0xA0	; 160
     144:	9f 4f       	sbci	r25, 0xFF	; 255
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	91 81       	ldd	r25, Z+1	; 0x01
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
        }
    }
}
     150:	00 00       	nop
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <GPIO_setupPinDirectionR>:
 * - last_pin_num: Last pin number in the range (0 to NUM_OF_PINS_PER_PORT-1).
 * - port_num: Port number where the pins are located.
 * - direction: Desired direction of the pins (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	00 d0       	rcall	.+0      	; 0x164 <GPIO_setupPinDirectionR+0x6>
     164:	00 d0       	rcall	.+0      	; 0x166 <GPIO_setupPinDirectionR+0x8>
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	8a 83       	std	Y+2, r24	; 0x02
     16e:	6b 83       	std	Y+3, r22	; 0x03
     170:	4c 83       	std	Y+4, r20	; 0x04
     172:	2d 83       	std	Y+5, r18	; 0x05
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	38 f5       	brcc	.+78     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	88 30       	cpi	r24, 0x08	; 8
     17e:	20 f5       	brcc	.+72     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
     180:	8c 81       	ldd	r24, Y+4	; 0x04
     182:	84 30       	cpi	r24, 0x04	; 4
     184:	08 f5       	brcc	.+66     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
        if (last_pin_num > first_pin_num) {
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	89 17       	cp	r24, r25
     18c:	e8 f4       	brcc	.+58     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     18e:	19 82       	std	Y+1, r1	; 0x01
     190:	0b c0       	rjmp	.+22     	; 0x1a8 <GPIO_setupPinDirectionR+0x4a>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	89 0f       	add	r24, r25
     198:	4d 81       	ldd	r20, Y+5	; 0x05
     19a:	68 2f       	mov	r22, r24
     19c:	8c 81       	ldd	r24, Y+4	; 0x04
     19e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
        if (last_pin_num > first_pin_num) {
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	89 83       	std	Y+1, r24	; 0x01
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	28 2f       	mov	r18, r24
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	48 2f       	mov	r20, r24
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	ba 01       	movw	r22, r20
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	cb 01       	movw	r24, r22
     1c2:	82 17       	cp	r24, r18
     1c4:	93 07       	cpc	r25, r19
     1c6:	2c f7       	brge	.-54     	; 0x192 <GPIO_setupPinDirectionR+0x34>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
            }
        }
    }
}
     1c8:	00 00       	nop
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <GPIO_writePin>:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - value: Logic level to be written (LOGIC_HIGH or LOGIC_LOW).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <GPIO_writePin+0x6>
     1e0:	1f 92       	push	r1
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	89 83       	std	Y+1, r24	; 0x01
     1e8:	6a 83       	std	Y+2, r22	; 0x02
     1ea:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     1ec:	8a 81       	ldd	r24, Y+2	; 0x02
     1ee:	88 30       	cpi	r24, 0x08	; 8
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <GPIO_writePin+0x1a>
     1f2:	56 c0       	rjmp	.+172    	; 0x2a0 <GPIO_writePin+0xc6>
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <GPIO_writePin+0x22>
     1fa:	52 c0       	rjmp	.+164    	; 0x2a0 <GPIO_writePin+0xc6>
        if (value == LOGIC_HIGH) {
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	31 f5       	brne	.+76     	; 0x24e <GPIO_writePin+0x74>
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	88 59       	subi	r24, 0x98	; 152
     20e:	9f 4f       	sbci	r25, 0xFF	; 255
     210:	fc 01       	movw	r30, r24
     212:	80 81       	ld	r24, Z
     214:	91 81       	ldd	r25, Z+1	; 0x01
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	48 2f       	mov	r20, r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <GPIO_writePin+0x52>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	2a 95       	dec	r18
     22e:	e2 f7       	brpl	.-8      	; 0x228 <GPIO_writePin+0x4e>
     230:	24 2f       	mov	r18, r20
     232:	28 2b       	or	r18, r24
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	88 2f       	mov	r24, r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	88 59       	subi	r24, 0x98	; 152
     240:	9f 4f       	sbci	r25, 0xFF	; 255
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
        } else if (value == LOGIC_LOW) {
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
        }
    }
}
     24c:	29 c0       	rjmp	.+82     	; 0x2a0 <GPIO_writePin+0xc6>
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
        if (value == LOGIC_HIGH) {
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
        } else if (value == LOGIC_LOW) {
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	88 23       	and	r24, r24
     252:	31 f5       	brne	.+76     	; 0x2a0 <GPIO_writePin+0xc6>
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	88 59       	subi	r24, 0x98	; 152
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	48 2f       	mov	r20, r24
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	28 2f       	mov	r18, r24
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <GPIO_writePin+0xa4>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	2a 95       	dec	r18
     280:	e2 f7       	brpl	.-8      	; 0x27a <GPIO_writePin+0xa0>
     282:	80 95       	com	r24
     284:	24 2f       	mov	r18, r20
     286:	28 23       	and	r18, r24
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	88 59       	subi	r24, 0x98	; 152
     294:	9f 4f       	sbci	r25, 0xFF	; 255
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18
        }
    }
}
     2a0:	00 00       	nop
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <GPIO_readPin>:
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * Returns:
 * - Logic level of the pin (LOGIC_HIGH or LOGIC_LOW).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <GPIO_readPin+0x6>
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
     2be:	19 82       	std	Y+1, r1	; 0x01

    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	f8 f4       	brcc	.+62     	; 0x304 <GPIO_readPin+0x56>
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	84 30       	cpi	r24, 0x04	; 4
     2ca:	e0 f4       	brcc	.+56     	; 0x304 <GPIO_readPin+0x56>
        if (READ_REG[port_num]->byte & (1 << pin_num)) {
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	80 59       	subi	r24, 0x90	; 144
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	91 81       	ldd	r25, Z+1	; 0x01
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 81       	ld	r24, Z
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	22 2f       	mov	r18, r18
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_readPin+0x46>
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_readPin+0x42>
     2f8:	81 70       	andi	r24, 0x01	; 1
     2fa:	99 27       	eor	r25, r25
     2fc:	89 2b       	or	r24, r25
     2fe:	11 f0       	breq	.+4      	; 0x304 <GPIO_readPin+0x56>
            pin_value = LOGIC_HIGH; // Pin is logic high
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return pin_value;
     304:	89 81       	ldd	r24, Y+1	; 0x01
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <GPIO_setupPortDirection>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - direction: Desired direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <GPIO_setupPortDirection+0x6>
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	84 30       	cpi	r24, 0x04	; 4
     324:	68 f4       	brcc	.+26     	; 0x340 <GPIO_setupPortDirection+0x2e>
        DIRECTION_REG[port_num]->byte = direction; // Set port direction
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	80 5a       	subi	r24, 0xA0	; 160
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
    }
}
     340:	00 00       	nop
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <GPIO_writePort>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - value: Value to be written to the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <GPIO_writePort+0x6>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	68 f4       	brcc	.+26     	; 0x37a <GPIO_writePort+0x2e>
        WRITE_REG[port_num]->byte = value; // Write value to port
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 59       	subi	r24, 0x98	; 152
     36c:	9f 4f       	sbci	r25, 0xFF	; 255
     36e:	fc 01       	movw	r30, r24
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	2a 81       	ldd	r18, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
    }
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <GPIO_readPort>:
 * - port_num: Port number to read from.
 * Returns:
 * - Value read from the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	00 d0       	rcall	.+0      	; 0x38c <GPIO_readPort+0x6>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
     392:	19 82       	std	Y+1, r1	; 0x01

    if (port_num < NUM_OF_PORTS) {
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	84 30       	cpi	r24, 0x04	; 4
     398:	68 f4       	brcc	.+26     	; 0x3b4 <GPIO_readPort+0x2e>
        value = READ_REG[port_num]->byte; // Read value from port
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	80 59       	subi	r24, 0x90	; 144
     3a6:	9f 4f       	sbci	r25, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	fc 01       	movw	r30, r24
     3b0:	80 81       	ld	r24, Z
     3b2:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <__vector_7>:
/*******************************************************************************
 *                        Interrupt Service Routine (ISR)                      *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
     3ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     3ee:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x1>
     3f2:	89 2b       	or	r24, r25
     3f4:	31 f0       	breq	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
    {
        (*g_callBackPtr)();
     3f6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     3fa:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x1>
     3fe:	fc 01       	movw	r30, r24
     400:	09 95       	icall
    }
}
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <Timer1_setCallBack>:
/*******************************************************************************
 *                              Functions Definitions                           *
 *******************************************************************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <Timer1_setCallBack+0x6>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
	 g_callBackPtr = a_ptr;
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
     440:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
}
     444:	00 00       	nop
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <Timer1_init>:

void Timer1_init(const Timer_ConfigType * Config_Ptr)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <Timer1_init+0x6>
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	9a 83       	std	Y+2, r25	; 0x02
     45c:	89 83       	std	Y+1, r24	; 0x01
    /* Clear Timer control registers */
    TCCR1A = 0;
     45e:	8f e4       	ldi	r24, 0x4F	; 79
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	fc 01       	movw	r30, r24
     464:	10 82       	st	Z, r1
    TCCR1B = 0;
     466:	8e e4       	ldi	r24, 0x4E	; 78
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	10 82       	st	Z, r1

    /* Set Timer initial value */
    TCNT1 = Config_Ptr->initial_value;
     46e:	8c e4       	ldi	r24, 0x4C	; 76
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	f9 01       	movw	r30, r18
     478:	20 81       	ld	r18, Z
     47a:	31 81       	ldd	r19, Z+1	; 0x01
     47c:	fc 01       	movw	r30, r24
     47e:	31 83       	std	Z+1, r19	; 0x01
     480:	20 83       	st	Z, r18

    /* Switch statement for the pre-scaler configuration */
    switch (Config_Ptr->prescaler) {
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	fc 01       	movw	r30, r24
     488:	84 81       	ldd	r24, Z+4	; 0x04
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	91 05       	cpc	r25, r1
     492:	81 f0       	breq	.+32     	; 0x4b4 <Timer1_init+0x64>
     494:	82 30       	cpi	r24, 0x02	; 2
     496:	91 05       	cpc	r25, r1
     498:	b9 f0       	breq	.+46     	; 0x4c8 <Timer1_init+0x78>
     49a:	89 2b       	or	r24, r25
     49c:	09 f0       	breq	.+2      	; 0x4a0 <Timer1_init+0x50>
            break;
        case F_CPU_1024:
            TCCR1B |= (1 << CS12) | (1 << CS10);
            break;
        default:
            break;
     49e:	1e c0       	rjmp	.+60     	; 0x4dc <Timer1_init+0x8c>
    TCNT1 = Config_Ptr->initial_value;

    /* Switch statement for the pre-scaler configuration */
    switch (Config_Ptr->prescaler) {
        case F_CPU_8:
            TCCR1B |= (1 << CS11);
     4a0:	8e e4       	ldi	r24, 0x4E	; 78
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 81       	ld	r18, Z
     4a8:	8e e4       	ldi	r24, 0x4E	; 78
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	22 60       	ori	r18, 0x02	; 2
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
            break;
     4b2:	14 c0       	rjmp	.+40     	; 0x4dc <Timer1_init+0x8c>
        case F_CPU_64:
            TCCR1B |= (1 << CS11) | (1 << CS10);
     4b4:	8e e4       	ldi	r24, 0x4E	; 78
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 81       	ld	r18, Z
     4bc:	8e e4       	ldi	r24, 0x4E	; 78
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	23 60       	ori	r18, 0x03	; 3
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
            break;
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <Timer1_init+0x8c>
        case F_CPU_1024:
            TCCR1B |= (1 << CS12) | (1 << CS10);
     4c8:	8e e4       	ldi	r24, 0x4E	; 78
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 81       	ld	r18, Z
     4d0:	8e e4       	ldi	r24, 0x4E	; 78
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	25 60       	ori	r18, 0x05	; 5
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
            break;
     4da:	00 00       	nop
        default:
            break;
    }

    /* Switch statement for setting the correct callback function for different modes */
    switch (Config_Ptr->mode) {
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	fc 01       	movw	r30, r24
     4e2:	85 81       	ldd	r24, Z+5	; 0x05
     4e4:	88 2f       	mov	r24, r24
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	91 05       	cpc	r25, r1
     4ec:	d1 f1       	breq	.+116    	; 0x562 <Timer1_init+0x112>
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	91 05       	cpc	r25, r1
     4f2:	19 f0       	breq	.+6      	; 0x4fa <Timer1_init+0xaa>
     4f4:	89 2b       	or	r24, r25
     4f6:	39 f1       	breq	.+78     	; 0x546 <Timer1_init+0xf6>
            TCCR1A = 0;                // Clear Timer on Compare Match (CTC) mode
            TCCR1B |= (1 << WGM12);    // CTC mode
            OCR1A = Config_Ptr->compare_value;      // Set the compare value
            break;
        default:
            break;
     4f8:	55 c0       	rjmp	.+170    	; 0x5a4 <Timer1_init+0x154>
    }

    /* Switch statement for setting the correct callback function for different modes */
    switch (Config_Ptr->mode) {
        case PWM_MODE:
            TIMSK |= (1 << OCIE1A);    // Enable Output Compare A Match Interrupt
     4fa:	89 e5       	ldi	r24, 0x59	; 89
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	20 81       	ld	r18, Z
     502:	89 e5       	ldi	r24, 0x59	; 89
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	20 61       	ori	r18, 0x10	; 16
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
            TCCR1A |= (1 << WGM11) | (1 << COM1A1); // Configure for Fast PWM mode, non-inverted
     50c:	8f e4       	ldi	r24, 0x4F	; 79
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
     512:	20 81       	ld	r18, Z
     514:	8f e4       	ldi	r24, 0x4F	; 79
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	22 68       	ori	r18, 0x82	; 130
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
            TCCR1B |= (1 << WGM12) | (1 << WGM13);  // Configure for Fast PWM mode
     51e:	8e e4       	ldi	r24, 0x4E	; 78
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	fc 01       	movw	r30, r24
     524:	20 81       	ld	r18, Z
     526:	8e e4       	ldi	r24, 0x4E	; 78
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	28 61       	ori	r18, 0x18	; 24
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
            OCR1A = Config_Ptr->compare_value;      // Set the duty cycle
     530:	8a e4       	ldi	r24, 0x4A	; 74
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	29 81       	ldd	r18, Y+1	; 0x01
     536:	3a 81       	ldd	r19, Y+2	; 0x02
     538:	f9 01       	movw	r30, r18
     53a:	22 81       	ldd	r18, Z+2	; 0x02
     53c:	33 81       	ldd	r19, Z+3	; 0x03
     53e:	fc 01       	movw	r30, r24
     540:	31 83       	std	Z+1, r19	; 0x01
     542:	20 83       	st	Z, r18
            break;
     544:	2f c0       	rjmp	.+94     	; 0x5a4 <Timer1_init+0x154>
        case NORMAL_MODE:
            TIMSK |= (1 << TOIE1);     // Enable Overflow Interrupt
     546:	89 e5       	ldi	r24, 0x59	; 89
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	20 81       	ld	r18, Z
     54e:	89 e5       	ldi	r24, 0x59	; 89
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	24 60       	ori	r18, 0x04	; 4
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
            TCCR1A = 0;                // Normal mode
     558:	8f e4       	ldi	r24, 0x4F	; 79
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	fc 01       	movw	r30, r24
     55e:	10 82       	st	Z, r1
            break;
     560:	21 c0       	rjmp	.+66     	; 0x5a4 <Timer1_init+0x154>
        case COMPARE_MODE:
            TIMSK |= (1 << OCIE1A);    // Enable Output Compare A Match Interrupt
     562:	89 e5       	ldi	r24, 0x59	; 89
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	fc 01       	movw	r30, r24
     568:	20 81       	ld	r18, Z
     56a:	89 e5       	ldi	r24, 0x59	; 89
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	20 61       	ori	r18, 0x10	; 16
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
            TCCR1A = 0;                // Clear Timer on Compare Match (CTC) mode
     574:	8f e4       	ldi	r24, 0x4F	; 79
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	fc 01       	movw	r30, r24
     57a:	10 82       	st	Z, r1
            TCCR1B |= (1 << WGM12);    // CTC mode
     57c:	8e e4       	ldi	r24, 0x4E	; 78
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	20 81       	ld	r18, Z
     584:	8e e4       	ldi	r24, 0x4E	; 78
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	28 60       	ori	r18, 0x08	; 8
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
            OCR1A = Config_Ptr->compare_value;      // Set the compare value
     58e:	8a e4       	ldi	r24, 0x4A	; 74
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	29 81       	ldd	r18, Y+1	; 0x01
     594:	3a 81       	ldd	r19, Y+2	; 0x02
     596:	f9 01       	movw	r30, r18
     598:	22 81       	ldd	r18, Z+2	; 0x02
     59a:	33 81       	ldd	r19, Z+3	; 0x03
     59c:	fc 01       	movw	r30, r24
     59e:	31 83       	std	Z+1, r19	; 0x01
     5a0:	20 83       	st	Z, r18
            break;
     5a2:	00 00       	nop
        default:
            break;
    }
}
     5a4:	00 00       	nop
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <Timer1_deinit>:

void Timer1_deinit(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     5b8:	8c e4       	ldi	r24, 0x4C	; 76
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	fc 01       	movw	r30, r24
     5be:	11 82       	std	Z+1, r1	; 0x01
     5c0:	10 82       	st	Z, r1
	TCCR1B = 0;
     5c2:	8e e4       	ldi	r24, 0x4E	; 78
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	10 82       	st	Z, r1
}
     5ca:	00 00       	nop
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <UART_init>:
 * This is the initialization function to configure the settings for the UART
 */

/* Initialization function of the UART Driver */
void UART_init(UART_ConfigType* Config_Ptr)
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <UART_init+0x6>
     5d8:	00 d0       	rcall	.+0      	; 0x5da <UART_init+0x8>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
    /* Value to be written in UBRR Register according to baud rate */
    uint16 ubrr_value = 0;
     5e2:	1a 82       	std	Y+2, r1	; 0x02
     5e4:	19 82       	std	Y+1, r1	; 0x01

    UCSRA = (1 << U2X); /* Asynchronous with double the UART transmission speed */
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	22 e0       	ldi	r18, 0x02	; 2
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
    UCSRB = (1 << TXEN) | (1 << RXEN); /* Transmitter and Receiver Enable */
     5f0:	8a e2       	ldi	r24, 0x2A	; 42
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	28 e1       	ldi	r18, 0x18	; 24
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18

    /* Set URSEL to 1 to access UCSRC */
    UCSRC = (1 << URSEL);
     5fa:	80 e4       	ldi	r24, 0x40	; 64
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	20 e8       	ldi	r18, 0x80	; 128
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
    /* Choose the Parity */
    UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity << 4);
     604:	80 e4       	ldi	r24, 0x40	; 64
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	fc 01       	movw	r30, r24
     60a:	80 81       	ld	r24, Z
     60c:	28 2f       	mov	r18, r24
     60e:	2f 7c       	andi	r18, 0xCF	; 207
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	fc 01       	movw	r30, r24
     616:	83 81       	ldd	r24, Z+3	; 0x03
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	82 95       	swap	r24
     61e:	92 95       	swap	r25
     620:	90 7f       	andi	r25, 0xF0	; 240
     622:	98 27       	eor	r25, r24
     624:	80 7f       	andi	r24, 0xF0	; 240
     626:	98 27       	eor	r25, r24
     628:	28 2b       	or	r18, r24
     62a:	80 e4       	ldi	r24, 0x40	; 64
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18

    /* Choose the Stop Bits */
    UCSRC = (UCSRC & ~(1 << USBS)) | (Config_Ptr->stop << USBS);
     632:	80 e4       	ldi	r24, 0x40	; 64
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	28 2f       	mov	r18, r24
     63c:	27 7f       	andi	r18, 0xF7	; 247
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	fc 01       	movw	r30, r24
     644:	84 81       	ldd	r24, Z+4	; 0x04
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	28 2b       	or	r18, r24
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18

    /* Choose the data length */
    switch (Config_Ptr->data)
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	9c 81       	ldd	r25, Y+4	; 0x04
     664:	fc 01       	movw	r30, r24
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	91 05       	cpc	r25, r1
     670:	01 f1       	breq	.+64     	; 0x6b2 <UART_init+0xe0>
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	91 05       	cpc	r25, r1
     676:	1c f4       	brge	.+6      	; 0x67e <UART_init+0xac>
     678:	89 2b       	or	r24, r25
     67a:	41 f0       	breq	.+16     	; 0x68c <UART_init+0xba>
     67c:	57 c0       	rjmp	.+174    	; 0x72c <UART_init+0x15a>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	91 05       	cpc	r25, r1
     682:	61 f1       	breq	.+88     	; 0x6dc <UART_init+0x10a>
     684:	03 97       	sbiw	r24, 0x03	; 3
     686:	09 f4       	brne	.+2      	; 0x68a <UART_init+0xb8>
     688:	3e c0       	rjmp	.+124    	; 0x706 <UART_init+0x134>
     68a:	50 c0       	rjmp	.+160    	; 0x72c <UART_init+0x15a>
    {
        case FIVE_BITS:
            UCSRB &= ~(1 << UCSZ2);
     68c:	8a e2       	ldi	r24, 0x2A	; 42
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	20 81       	ld	r18, Z
     694:	8a e2       	ldi	r24, 0x2A	; 42
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	2b 7f       	andi	r18, 0xFB	; 251
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
            UCSRC &= ~((1 << UCSZ1) | (1 << UCSZ0));
     69e:	80 e4       	ldi	r24, 0x40	; 64
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 81       	ld	r18, Z
     6a6:	80 e4       	ldi	r24, 0x40	; 64
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	29 7f       	andi	r18, 0xF9	; 249
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
            break;
     6b0:	3d c0       	rjmp	.+122    	; 0x72c <UART_init+0x15a>
        case SIX_BITS:
            UCSRB &= ~(1 << UCSZ2);
     6b2:	8a e2       	ldi	r24, 0x2A	; 42
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 81       	ld	r18, Z
     6ba:	8a e2       	ldi	r24, 0x2A	; 42
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2b 7f       	andi	r18, 0xFB	; 251
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18
            UCSRC = (UCSRC & ~(1 << UCSZ1)) | (1 << UCSZ0);
     6c4:	80 e4       	ldi	r24, 0x40	; 64
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	89 7f       	andi	r24, 0xF9	; 249
     6ce:	28 2f       	mov	r18, r24
     6d0:	22 60       	ori	r18, 0x02	; 2
     6d2:	80 e4       	ldi	r24, 0x40	; 64
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
            break;
     6da:	28 c0       	rjmp	.+80     	; 0x72c <UART_init+0x15a>
        case SEVEN_BITS:
            UCSRB &= ~(1 << UCSZ2);
     6dc:	8a e2       	ldi	r24, 0x2A	; 42
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 81       	ld	r18, Z
     6e4:	8a e2       	ldi	r24, 0x2A	; 42
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	2b 7f       	andi	r18, 0xFB	; 251
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
            UCSRC = (UCSRC & ~(1 << UCSZ0)) | (1 << UCSZ1);
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	89 7f       	andi	r24, 0xF9	; 249
     6f8:	28 2f       	mov	r18, r24
     6fa:	24 60       	ori	r18, 0x04	; 4
     6fc:	80 e4       	ldi	r24, 0x40	; 64
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
            break;
     704:	13 c0       	rjmp	.+38     	; 0x72c <UART_init+0x15a>
        case EIGHT_BITS:
            UCSRB &= ~(1 << UCSZ2);
     706:	8a e2       	ldi	r24, 0x2A	; 42
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	20 81       	ld	r18, Z
     70e:	8a e2       	ldi	r24, 0x2A	; 42
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2b 7f       	andi	r18, 0xFB	; 251
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
            UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	20 81       	ld	r18, Z
     720:	80 e4       	ldi	r24, 0x40	; 64
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	26 60       	ori	r18, 0x06	; 6
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
            break;
     72a:	00 00       	nop
    }

    /* Calculate the value to be written in UBRR Register according to baud rate */
    ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baudrate))) - 1);
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	cc 01       	movw	r24, r24
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	aa 1f       	adc	r26, r26
     742:	bb 1f       	adc	r27, r27
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	aa 1f       	adc	r26, r26
     74a:	bb 1f       	adc	r27, r27
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	aa 1f       	adc	r26, r26
     752:	bb 1f       	adc	r27, r27
     754:	9c 01       	movw	r18, r24
     756:	ad 01       	movw	r20, r26
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	92 e1       	ldi	r25, 0x12	; 18
     75c:	aa e7       	ldi	r26, 0x7A	; 122
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__udivmodsi4>
     768:	da 01       	movw	r26, r20
     76a:	c9 01       	movw	r24, r18
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01

    /* Write the UBRR value */
    UBRRH = (uint8)(ubrr_value >> 8);
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	29 2f       	mov	r18, r25
     778:	33 27       	eor	r19, r19
     77a:	80 e4       	ldi	r24, 0x40	; 64
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
    UBRRL = (uint8)ubrr_value;
     782:	89 e2       	ldi	r24, 0x29	; 41
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
}
     78c:	00 00       	nop
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <UART_sendByte>:

/* Function responsible for sending a byte to another UART device. */
void UART_sendByte(const uint8 data)
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for the UDRE Flag to be set indicating that the UDR register is empty */
    while (!(UCSRA & (1 << UDRE)));
     7a8:	00 00       	nop
     7aa:	8b e2       	ldi	r24, 0x2B	; 43
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	80 72       	andi	r24, 0x20	; 32
     7b8:	99 27       	eor	r25, r25
     7ba:	89 2b       	or	r24, r25
     7bc:	b1 f3       	breq	.-20     	; 0x7aa <UART_sendByte+0xe>

    /* Put the required data to be sent in the UDR Register */
    UDR = data;
     7be:	8c e2       	ldi	r24, 0x2C	; 44
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	29 81       	ldd	r18, Y+1	; 0x01
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
}
     7c8:	00 00       	nop
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <UART_receiveByte>:

/* Function responsible for receiving a byte from another UART device. */
uint8 UART_receiveByte(void)
{
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
    /* Wait for the RXC Flag to be set indicating that the UART finished receiving the data */
    while (!(UCSRA & (1 << RXC)));
     7da:	00 00       	nop
     7dc:	8b e2       	ldi	r24, 0x2B	; 43
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 23       	and	r24, r24
     7e6:	d4 f7       	brge	.-12     	; 0x7dc <UART_receiveByte+0xa>

    /* Read the data received from the UDR Register */
    return UDR;
     7e8:	8c e2       	ldi	r24, 0x2C	; 44
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 81       	ld	r24, Z
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <UART_sendString>:

/* Send the required string through UART to the other UART device. */
void UART_sendString(const uint8* str)
{
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <UART_sendString+0x6>
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
    /* Send the whole string byte by byte */
    while (*str != '\0')
     804:	0b c0       	rjmp	.+22     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
    {
        UART_sendByte(*str);
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	80 81       	ld	r24, Z
     80e:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>
        str++;
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01

/* Send the required string through UART to the other UART device. */
void UART_sendString(const uint8* str)
{
    /* Send the whole string byte by byte */
    while (*str != '\0')
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	fc 01       	movw	r30, r24
     822:	80 81       	ld	r24, Z
     824:	88 23       	and	r24, r24
     826:	79 f7       	brne	.-34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
    {
        UART_sendByte(*str);
        str++;
    }
}
     828:	00 00       	nop
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <UART_receiveString>:

/* Receive the required string until the '#' symbol through UART from the other UART device. */
void UART_receiveString(uint8* str)
{
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <UART_receiveString+0xa>
     83e:	1f 92       	push	r1
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	9b 83       	std	Y+3, r25	; 0x03
     846:	8a 83       	std	Y+2, r24	; 0x02
    /* Counter */
    uint8 i = 0;
     848:	19 82       	std	Y+1, r1	; 0x01

    /* Receive first byte */
    str[i] = UART_receiveByte();
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	2a 81       	ldd	r18, Y+2	; 0x02
     852:	3b 81       	ldd	r19, Y+3	; 0x03
     854:	89 01       	movw	r16, r18
     856:	08 0f       	add	r16, r24
     858:	19 1f       	adc	r17, r25
     85a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <UART_receiveByte>
     85e:	f8 01       	movw	r30, r16
     860:	80 83       	st	Z, r24

    while (str[i] != '#') /* # is the key for sending and receiving */
     862:	0f c0       	rjmp	.+30     	; 0x882 <__stack+0x23>
    {
        /* Receive new byte from the string in the next free location */
        i++;
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	8f 5f       	subi	r24, 0xFF	; 255
     868:	89 83       	std	Y+1, r24	; 0x01
        str[i] = UART_receiveByte();
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2a 81       	ldd	r18, Y+2	; 0x02
     872:	3b 81       	ldd	r19, Y+3	; 0x03
     874:	89 01       	movw	r16, r18
     876:	08 0f       	add	r16, r24
     878:	19 1f       	adc	r17, r25
     87a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <UART_receiveByte>
     87e:	f8 01       	movw	r30, r16
     880:	80 83       	st	Z, r24
    uint8 i = 0;

    /* Receive first byte */
    str[i] = UART_receiveByte();

    while (str[i] != '#') /* # is the key for sending and receiving */
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	88 2f       	mov	r24, r24
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	2a 81       	ldd	r18, Y+2	; 0x02
     88a:	3b 81       	ldd	r19, Y+3	; 0x03
     88c:	82 0f       	add	r24, r18
     88e:	93 1f       	adc	r25, r19
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	83 32       	cpi	r24, 0x23	; 35
     896:	31 f7       	brne	.-52     	; 0x864 <__stack+0x5>
        /* Receive new byte from the string in the next free location */
        i++;
        str[i] = UART_receiveByte();
    }

    str[i] = '\0'; /* Put the null terminator for the string */
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2a 81       	ldd	r18, Y+2	; 0x02
     8a0:	3b 81       	ldd	r19, Y+3	; 0x03
     8a2:	82 0f       	add	r24, r18
     8a4:	93 1f       	adc	r25, r19
     8a6:	fc 01       	movw	r30, r24
     8a8:	10 82       	st	Z, r1
}
     8aa:	00 00       	nop
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	60 97       	sbiw	r28, 0x10	; 16
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirectionR(KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_ROW_PORT_ID, PIN_INPUT);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	42 e0       	ldi	r20, 0x02	; 2
     8d4:	63 e0       	ldi	r22, 0x03	; 3
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_setupPinDirectionR>
	GPIO_setupPinDirectionR(KEYPAD_FIRST_COL_PIN_ID, KEYPAD_FIRST_COL_PIN_ID+3 ,KEYPAD_COL_PORT_ID,  PIN_INPUT);
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	42 e0       	ldi	r20, 0x02	; 2
     8e0:	67 e0       	ldi	r22, 0x07	; 7
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_setupPinDirectionR>

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     8e8:	1a 82       	std	Y+2, r1	; 0x02
     8ea:	9e c0       	rjmp	.+316    	; 0xa28 <KEYPAD_getPressedKey+0x16c>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	6a 81       	ldd	r22, Y+2	; 0x02
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	6a 81       	ldd	r22, Y+2	; 0x02
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     900:	19 82       	std	Y+1, r1	; 0x01
     902:	15 c0       	rjmp	.+42     	; 0x92e <KEYPAD_getPressedKey+0x72>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	8c 5f       	subi	r24, 0xFC	; 252
     908:	68 2f       	mov	r22, r24
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	0e 94 57 01 	call	0x2ae	; 0x2ae <GPIO_readPin>
     910:	88 23       	and	r24, r24
     912:	51 f4       	brne	.+20     	; 0x928 <KEYPAD_getPressedKey+0x6c>
				{
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	98 2f       	mov	r25, r24
     918:	99 0f       	add	r25, r25
     91a:	99 0f       	add	r25, r25
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	89 0f       	add	r24, r25
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	0e 94 22 05 	call	0xa44	; 0xa44 <KEYPAD_4x4_adjustKeyNumber>
     926:	85 c0       	rjmp	.+266    	; 0xa32 <KEYPAD_getPressedKey+0x176>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	84 30       	cpi	r24, 0x04	; 4
     932:	40 f3       	brcs	.-48     	; 0x904 <KEYPAD_getPressedKey+0x48>
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	6a 81       	ldd	r22, Y+2	; 0x02
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 ea       	ldi	r26, 0xA0	; 160
     944:	b0 e4       	ldi	r27, 0x40	; 64
     946:	8b 83       	std	Y+3, r24	; 0x03
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	ad 83       	std	Y+5, r26	; 0x05
     94c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	4a ef       	ldi	r20, 0xFA	; 250
     954:	54 e4       	ldi	r21, 0x44	; 68
     956:	6b 81       	ldd	r22, Y+3	; 0x03
     958:	7c 81       	ldd	r23, Y+4	; 0x04
     95a:	8d 81       	ldd	r24, Y+5	; 0x05
     95c:	9e 81       	ldd	r25, Y+6	; 0x06
     95e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	8f 83       	std	Y+7, r24	; 0x07
     968:	98 87       	std	Y+8, r25	; 0x08
     96a:	a9 87       	std	Y+9, r26	; 0x09
     96c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	6f 81       	ldd	r22, Y+7	; 0x07
     978:	78 85       	ldd	r23, Y+8	; 0x08
     97a:	89 85       	ldd	r24, Y+9	; 0x09
     97c:	9a 85       	ldd	r25, Y+10	; 0x0a
     97e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	2c f4       	brge	.+10     	; 0x990 <KEYPAD_getPressedKey+0xd4>
		__ticks = 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9c 87       	std	Y+12, r25	; 0x0c
     98c:	8b 87       	std	Y+11, r24	; 0x0b
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <KEYPAD_getPressedKey+0x152>
	else if (__tmp > 65535)
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f e7       	ldi	r20, 0x7F	; 127
     996:	57 e4       	ldi	r21, 0x47	; 71
     998:	6f 81       	ldd	r22, Y+7	; 0x07
     99a:	78 85       	ldd	r23, Y+8	; 0x08
     99c:	89 85       	ldd	r24, Y+9	; 0x09
     99e:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	4c f5       	brge	.+82     	; 0x9fa <KEYPAD_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	6b 81       	ldd	r22, Y+3	; 0x03
     9b2:	7c 81       	ldd	r23, Y+4	; 0x04
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	9e 81       	ldd	r25, Y+6	; 0x06
     9b8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9c 87       	std	Y+12, r25	; 0x0c
     9ce:	8b 87       	std	Y+11, r24	; 0x0b
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <KEYPAD_getPressedKey+0x134>
     9d2:	88 ec       	ldi	r24, 0xC8	; 200
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9e 87       	std	Y+14, r25	; 0x0e
     9d8:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9da:	8d 85       	ldd	r24, Y+13	; 0x0d
     9dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <KEYPAD_getPressedKey+0x122>
     9e2:	9e 87       	std	Y+14, r25	; 0x0e
     9e4:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9c 87       	std	Y+12, r25	; 0x0c
     9ee:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f4:	89 2b       	or	r24, r25
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <KEYPAD_getPressedKey+0x116>
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <KEYPAD_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	6f 81       	ldd	r22, Y+7	; 0x07
     9fc:	78 85       	ldd	r23, Y+8	; 0x08
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	9a 85       	ldd	r25, Y+10	; 0x0a
     a02:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9c 87       	std	Y+12, r25	; 0x0c
     a0c:	8b 87       	std	Y+11, r24	; 0x0b
     a0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a10:	9c 85       	ldd	r25, Y+12	; 0x0c
     a12:	98 8b       	std	Y+16, r25	; 0x10
     a14:	8f 87       	std	Y+15, r24	; 0x0f
     a16:	8f 85       	ldd	r24, Y+15	; 0x0f
     a18:	98 89       	ldd	r25, Y+16	; 0x10
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <KEYPAD_getPressedKey+0x15e>
     a1e:	98 8b       	std	Y+16, r25	; 0x10
     a20:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_setupPinDirectionR(KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_ROW_PORT_ID, PIN_INPUT);
	GPIO_setupPinDirectionR(KEYPAD_FIRST_COL_PIN_ID, KEYPAD_FIRST_COL_PIN_ID+3 ,KEYPAD_COL_PORT_ID,  PIN_INPUT);

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	8a 83       	std	Y+2, r24	; 0x02
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <KEYPAD_getPressedKey+0x174>
     a2e:	5e cf       	rjmp	.-324    	; 0x8ec <KEYPAD_getPressedKey+0x30>
     a30:	5b cf       	rjmp	.-330    	; 0x8e8 <KEYPAD_getPressedKey+0x2c>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
     a32:	60 96       	adiw	r28, 0x10	; 16
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <KEYPAD_4x4_adjustKeyNumber+0x6>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	8a 83       	std	Y+2, r24	; 0x02
    uint8 keypad_button;
    switch (button_number)
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	09 2e       	mov	r0, r25
     a58:	00 0c       	add	r0, r0
     a5a:	aa 0b       	sbc	r26, r26
     a5c:	bb 0b       	sbc	r27, r27
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	a1 09       	sbc	r26, r1
     a62:	b1 09       	sbc	r27, r1
     a64:	80 31       	cpi	r24, 0x10	; 16
     a66:	91 05       	cpc	r25, r1
     a68:	a1 05       	cpc	r26, r1
     a6a:	b1 05       	cpc	r27, r1
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <KEYPAD_4x4_adjustKeyNumber+0x2c>
     a6e:	44 c0       	rjmp	.+136    	; 0xaf8 <KEYPAD_4x4_adjustKeyNumber+0xb4>
     a70:	83 5c       	subi	r24, 0xC3	; 195
     a72:	9a 4f       	sbci	r25, 0xFA	; 250
     a74:	fc 01       	movw	r30, r24
     a76:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__tablejump2__>
     a7a:	4d 05       	cpc	r20, r13
     a7c:	50 05       	cpc	r21, r0
     a7e:	53 05       	cpc	r21, r3
     a80:	56 05       	cpc	r21, r6
     a82:	59 05       	cpc	r21, r9
     a84:	5c 05       	cpc	r21, r12
     a86:	5f 05       	cpc	r21, r15
     a88:	62 05       	cpc	r22, r2
     a8a:	65 05       	cpc	r22, r5
     a8c:	68 05       	cpc	r22, r8
     a8e:	6b 05       	cpc	r22, r11
     a90:	6e 05       	cpc	r22, r14
     a92:	71 05       	cpc	r23, r1
     a94:	74 05       	cpc	r23, r4
     a96:	76 05       	cpc	r23, r6
     a98:	79 05       	cpc	r23, r9
    {
        case 1: keypad_button = 7; break;
     a9a:	87 e0       	ldi	r24, 0x07	; 7
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	2f c0       	rjmp	.+94     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 2: keypad_button = 8; break;
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	2c c0       	rjmp	.+88     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 3: keypad_button = 9; break;
     aa6:	89 e0       	ldi	r24, 0x09	; 9
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	29 c0       	rjmp	.+82     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 4: keypad_button = '%'; break; // ASCII Code of %
     aac:	85 e2       	ldi	r24, 0x25	; 37
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	26 c0       	rjmp	.+76     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 5: keypad_button = 4; break;
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	23 c0       	rjmp	.+70     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 6: keypad_button = 5; break;
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	20 c0       	rjmp	.+64     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 7: keypad_button = 6; break;
     abe:	86 e0       	ldi	r24, 0x06	; 6
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	1d c0       	rjmp	.+58     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 8: keypad_button = '*'; break; /* ASCII Code of '*' */
     ac4:	8a e2       	ldi	r24, 0x2A	; 42
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	1a c0       	rjmp	.+52     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 9: keypad_button = 1; break;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	17 c0       	rjmp	.+46     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 10: keypad_button = 2; break;
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	14 c0       	rjmp	.+40     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 11: keypad_button = 3; break;
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	11 c0       	rjmp	.+34     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 12: keypad_button = '-'; break; /* ASCII Code of '-' */
     adc:	8d e2       	ldi	r24, 0x2D	; 45
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 13: keypad_button = 13; break;  /* ASCII of Enter */
     ae2:	8d e0       	ldi	r24, 0x0D	; 13
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 14: keypad_button = 0; break;
     ae8:	19 82       	std	Y+1, r1	; 0x01
     aea:	09 c0       	rjmp	.+18     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 15: keypad_button = '='; break; /* ASCII Code of '=' */
     aec:	8d e3       	ldi	r24, 0x3D	; 61
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	06 c0       	rjmp	.+12     	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        case 16: keypad_button = '+'; break; /* ASCII Code of '+' */
     af2:	8b e2       	ldi	r24, 0x2B	; 43
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	03 c0       	rjmp	.+6      	; 0xafe <KEYPAD_4x4_adjustKeyNumber+0xba>
        default: keypad_button = button_number; break;
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	00 00       	nop
    }
    return keypad_button;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <LCD_init>:
 * 1. Configures the direction of RS and E pins as output.
 * 2. Sets the data mode to 8-bits.
 * 3. Performs necessary initialization delays.
 */
void LCD_init(void)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	2e 97       	sbiw	r28, 0x0e	; 14
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
    /* Configure RS and E pins as output */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

    /* Configure data port as output */
    GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
     b32:	6f ef       	ldi	r22, 0xFF	; 255
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 89 01 	call	0x312	; 0x312 <GPIO_setupPortDirection>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 ea       	ldi	r26, 0xA0	; 160
     b40:	b1 e4       	ldi	r27, 0x41	; 65
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	4a ef       	ldi	r20, 0xFA	; 250
     b50:	54 e4       	ldi	r21, 0x44	; 68
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	af 83       	std	Y+7, r26	; 0x07
     b68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e8       	ldi	r20, 0x80	; 128
     b70:	5f e3       	ldi	r21, 0x3F	; 63
     b72:	6d 81       	ldd	r22, Y+5	; 0x05
     b74:	7e 81       	ldd	r23, Y+6	; 0x06
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     b7e:	88 23       	and	r24, r24
     b80:	2c f4       	brge	.+10     	; 0xb8c <LCD_init+0x82>
		__ticks = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9a 87       	std	Y+10, r25	; 0x0a
     b88:	89 87       	std	Y+9, r24	; 0x09
     b8a:	3f c0       	rjmp	.+126    	; 0xc0a <LCD_init+0x100>
	else if (__tmp > 65535)
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	4f e7       	ldi	r20, 0x7F	; 127
     b92:	57 e4       	ldi	r21, 0x47	; 71
     b94:	6d 81       	ldd	r22, Y+5	; 0x05
     b96:	7e 81       	ldd	r23, Y+6	; 0x06
     b98:	8f 81       	ldd	r24, Y+7	; 0x07
     b9a:	98 85       	ldd	r25, Y+8	; 0x08
     b9c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	4c f5       	brge	.+82     	; 0xbf6 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e2       	ldi	r20, 0x20	; 32
     baa:	51 e4       	ldi	r21, 0x41	; 65
     bac:	69 81       	ldd	r22, Y+1	; 0x01
     bae:	7a 81       	ldd	r23, Y+2	; 0x02
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	9a 87       	std	Y+10, r25	; 0x0a
     bca:	89 87       	std	Y+9, r24	; 0x09
     bcc:	0f c0       	rjmp	.+30     	; 0xbec <LCD_init+0xe2>
     bce:	88 ec       	ldi	r24, 0xC8	; 200
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9c 87       	std	Y+12, r25	; 0x0c
     bd4:	8b 87       	std	Y+11, r24	; 0x0b
     bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <LCD_init+0xd0>
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9a 87       	std	Y+10, r25	; 0x0a
     bea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	89 2b       	or	r24, r25
     bf2:	69 f7       	brne	.-38     	; 0xbce <LCD_init+0xc4>
     bf4:	14 c0       	rjmp	.+40     	; 0xc1e <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf6:	6d 81       	ldd	r22, Y+5	; 0x05
     bf8:	7e 81       	ldd	r23, Y+6	; 0x06
     bfa:	8f 81       	ldd	r24, Y+7	; 0x07
     bfc:	98 85       	ldd	r25, Y+8	; 0x08
     bfe:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9a 87       	std	Y+10, r25	; 0x0a
     c08:	89 87       	std	Y+9, r24	; 0x09
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	9e 87       	std	Y+14, r25	; 0x0e
     c10:	8d 87       	std	Y+13, r24	; 0x0d
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCD_init+0x10c>
     c1a:	9e 87       	std	Y+14, r25	; 0x0e
     c1c:	8d 87       	std	Y+13, r24	; 0x0d

    _delay_ms(20);  /* Delay for LCD power-on (must be > 15ms) */

    /* Initialize LCD settings */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* 2-line display, 8-bit data */
     c1e:	88 e3       	ldi	r24, 0x38	; 56
     c20:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
    LCD_sendCommand(LCD_CURSOR_OFF); /* Turn off cursor */
     c24:	8c e0       	ldi	r24, 0x0C	; 12
     c26:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD screen */
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
}
     c30:	00 00       	nop
     c32:	2e 96       	adiw	r28, 0x0e	; 14
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <LCD_sendCommand>:
 *
 * Parameters:
 * - command: Command byte to be sent to the LCD.
 */
void LCD_sendCommand(uint8 command)
{
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	e9 97       	sbiw	r28, 0x39	; 57
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	89 af       	std	Y+57, r24	; 0x39
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	a0 e8       	ldi	r26, 0x80	; 128
     c6a:	bf e3       	ldi	r27, 0x3F	; 63
     c6c:	8b a7       	std	Y+43, r24	; 0x2b
     c6e:	9c a7       	std	Y+44, r25	; 0x2c
     c70:	ad a7       	std	Y+45, r26	; 0x2d
     c72:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	4a ef       	ldi	r20, 0xFA	; 250
     c7a:	54 e4       	ldi	r21, 0x44	; 68
     c7c:	6b a5       	ldd	r22, Y+43	; 0x2b
     c7e:	7c a5       	ldd	r23, Y+44	; 0x2c
     c80:	8d a5       	ldd	r24, Y+45	; 0x2d
     c82:	9e a5       	ldd	r25, Y+46	; 0x2e
     c84:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	8f a7       	std	Y+47, r24	; 0x2f
     c8e:	98 ab       	std	Y+48, r25	; 0x30
     c90:	a9 ab       	std	Y+49, r26	; 0x31
     c92:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e8       	ldi	r20, 0x80	; 128
     c9a:	5f e3       	ldi	r21, 0x3F	; 63
     c9c:	6f a5       	ldd	r22, Y+47	; 0x2f
     c9e:	78 a9       	ldd	r23, Y+48	; 0x30
     ca0:	89 a9       	ldd	r24, Y+49	; 0x31
     ca2:	9a a9       	ldd	r25, Y+50	; 0x32
     ca4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     ca8:	88 23       	and	r24, r24
     caa:	2c f4       	brge	.+10     	; 0xcb6 <LCD_sendCommand+0x72>
		__ticks = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	9c ab       	std	Y+52, r25	; 0x34
     cb2:	8b ab       	std	Y+51, r24	; 0x33
     cb4:	3f c0       	rjmp	.+126    	; 0xd34 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	3f ef       	ldi	r19, 0xFF	; 255
     cba:	4f e7       	ldi	r20, 0x7F	; 127
     cbc:	57 e4       	ldi	r21, 0x47	; 71
     cbe:	6f a5       	ldd	r22, Y+47	; 0x2f
     cc0:	78 a9       	ldd	r23, Y+48	; 0x30
     cc2:	89 a9       	ldd	r24, Y+49	; 0x31
     cc4:	9a a9       	ldd	r25, Y+50	; 0x32
     cc6:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     cca:	18 16       	cp	r1, r24
     ccc:	4c f5       	brge	.+82     	; 0xd20 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e2       	ldi	r20, 0x20	; 32
     cd4:	51 e4       	ldi	r21, 0x41	; 65
     cd6:	6b a5       	ldd	r22, Y+43	; 0x2b
     cd8:	7c a5       	ldd	r23, Y+44	; 0x2c
     cda:	8d a5       	ldd	r24, Y+45	; 0x2d
     cdc:	9e a5       	ldd	r25, Y+46	; 0x2e
     cde:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9c ab       	std	Y+52, r25	; 0x34
     cf4:	8b ab       	std	Y+51, r24	; 0x33
     cf6:	0f c0       	rjmp	.+30     	; 0xd16 <LCD_sendCommand+0xd2>
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9e ab       	std	Y+54, r25	; 0x36
     cfe:	8d ab       	std	Y+53, r24	; 0x35
     d00:	8d a9       	ldd	r24, Y+53	; 0x35
     d02:	9e a9       	ldd	r25, Y+54	; 0x36
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <LCD_sendCommand+0xc0>
     d08:	9e ab       	std	Y+54, r25	; 0x36
     d0a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0c:	8b a9       	ldd	r24, Y+51	; 0x33
     d0e:	9c a9       	ldd	r25, Y+52	; 0x34
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	9c ab       	std	Y+52, r25	; 0x34
     d14:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d16:	8b a9       	ldd	r24, Y+51	; 0x33
     d18:	9c a9       	ldd	r25, Y+52	; 0x34
     d1a:	89 2b       	or	r24, r25
     d1c:	69 f7       	brne	.-38     	; 0xcf8 <LCD_sendCommand+0xb4>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d20:	6f a5       	ldd	r22, Y+47	; 0x2f
     d22:	78 a9       	ldd	r23, Y+48	; 0x30
     d24:	89 a9       	ldd	r24, Y+49	; 0x31
     d26:	9a a9       	ldd	r25, Y+50	; 0x32
     d28:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9c ab       	std	Y+52, r25	; 0x34
     d32:	8b ab       	std	Y+51, r24	; 0x33
     d34:	8b a9       	ldd	r24, Y+51	; 0x33
     d36:	9c a9       	ldd	r25, Y+52	; 0x34
     d38:	98 af       	std	Y+56, r25	; 0x38
     d3a:	8f ab       	std	Y+55, r24	; 0x37
     d3c:	8f a9       	ldd	r24, Y+55	; 0x37
     d3e:	98 ad       	ldd	r25, Y+56	; 0x38
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <LCD_sendCommand+0xfc>
     d44:	98 af       	std	Y+56, r25	; 0x38
     d46:	8f ab       	std	Y+55, r24	; 0x37
    _delay_ms(1); /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e8       	ldi	r26, 0x80	; 128
     d58:	bf e3       	ldi	r27, 0x3F	; 63
     d5a:	8d 8f       	std	Y+29, r24	; 0x1d
     d5c:	9e 8f       	std	Y+30, r25	; 0x1e
     d5e:	af 8f       	std	Y+31, r26	; 0x1f
     d60:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	4a ef       	ldi	r20, 0xFA	; 250
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d70:	98 a1       	ldd	r25, Y+32	; 0x20
     d72:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	89 a3       	std	Y+33, r24	; 0x21
     d7c:	9a a3       	std	Y+34, r25	; 0x22
     d7e:	ab a3       	std	Y+35, r26	; 0x23
     d80:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	5f e3       	ldi	r21, 0x3F	; 63
     d8a:	69 a1       	ldd	r22, Y+33	; 0x21
     d8c:	7a a1       	ldd	r23, Y+34	; 0x22
     d8e:	8b a1       	ldd	r24, Y+35	; 0x23
     d90:	9c a1       	ldd	r25, Y+36	; 0x24
     d92:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     d96:	88 23       	and	r24, r24
     d98:	2c f4       	brge	.+10     	; 0xda4 <LCD_sendCommand+0x160>
		__ticks = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9e a3       	std	Y+38, r25	; 0x26
     da0:	8d a3       	std	Y+37, r24	; 0x25
     da2:	3f c0       	rjmp	.+126    	; 0xe22 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	3f ef       	ldi	r19, 0xFF	; 255
     da8:	4f e7       	ldi	r20, 0x7F	; 127
     daa:	57 e4       	ldi	r21, 0x47	; 71
     dac:	69 a1       	ldd	r22, Y+33	; 0x21
     dae:	7a a1       	ldd	r23, Y+34	; 0x22
     db0:	8b a1       	ldd	r24, Y+35	; 0x23
     db2:	9c a1       	ldd	r25, Y+36	; 0x24
     db4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     db8:	18 16       	cp	r1, r24
     dba:	4c f5       	brge	.+82     	; 0xe0e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dc6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     dc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dca:	98 a1       	ldd	r25, Y+32	; 0x20
     dcc:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	9e a3       	std	Y+38, r25	; 0x26
     de2:	8d a3       	std	Y+37, r24	; 0x25
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <LCD_sendCommand+0x1c0>
     de6:	88 ec       	ldi	r24, 0xC8	; 200
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	98 a7       	std	Y+40, r25	; 0x28
     dec:	8f a3       	std	Y+39, r24	; 0x27
     dee:	8f a1       	ldd	r24, Y+39	; 0x27
     df0:	98 a5       	ldd	r25, Y+40	; 0x28
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <LCD_sendCommand+0x1ae>
     df6:	98 a7       	std	Y+40, r25	; 0x28
     df8:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfa:	8d a1       	ldd	r24, Y+37	; 0x25
     dfc:	9e a1       	ldd	r25, Y+38	; 0x26
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	9e a3       	std	Y+38, r25	; 0x26
     e02:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e04:	8d a1       	ldd	r24, Y+37	; 0x25
     e06:	9e a1       	ldd	r25, Y+38	; 0x26
     e08:	89 2b       	or	r24, r25
     e0a:	69 f7       	brne	.-38     	; 0xde6 <LCD_sendCommand+0x1a2>
     e0c:	14 c0       	rjmp	.+40     	; 0xe36 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0e:	69 a1       	ldd	r22, Y+33	; 0x21
     e10:	7a a1       	ldd	r23, Y+34	; 0x22
     e12:	8b a1       	ldd	r24, Y+35	; 0x23
     e14:	9c a1       	ldd	r25, Y+36	; 0x24
     e16:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	9e a3       	std	Y+38, r25	; 0x26
     e20:	8d a3       	std	Y+37, r24	; 0x25
     e22:	8d a1       	ldd	r24, Y+37	; 0x25
     e24:	9e a1       	ldd	r25, Y+38	; 0x26
     e26:	9a a7       	std	Y+42, r25	; 0x2a
     e28:	89 a7       	std	Y+41, r24	; 0x29
     e2a:	89 a5       	ldd	r24, Y+41	; 0x29
     e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCD_sendCommand+0x1ea>
     e32:	9a a7       	std	Y+42, r25	; 0x2a
     e34:	89 a7       	std	Y+41, r24	; 0x29
    _delay_ms(1); /* Delay for processing (Tpw - Tdws = 190ns) */
    GPIO_writePort(LCD_DATA_PORT_ID, command); /* Output command to data bus (D0 --> D7) */
     e36:	69 ad       	ldd	r22, Y+57	; 0x39
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 a6 01 	call	0x34c	; 0x34c <GPIO_writePort>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e8       	ldi	r26, 0x80	; 128
     e44:	bf e3       	ldi	r27, 0x3F	; 63
     e46:	8f 87       	std	Y+15, r24	; 0x0f
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	a9 8b       	std	Y+17, r26	; 0x11
     e4c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	6f 85       	ldd	r22, Y+15	; 0x0f
     e58:	78 89       	ldd	r23, Y+16	; 0x10
     e5a:	89 89       	ldd	r24, Y+17	; 0x11
     e5c:	9a 89       	ldd	r25, Y+18	; 0x12
     e5e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8b 8b       	std	Y+19, r24	; 0x13
     e68:	9c 8b       	std	Y+20, r25	; 0x14
     e6a:	ad 8b       	std	Y+21, r26	; 0x15
     e6c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	6b 89       	ldd	r22, Y+19	; 0x13
     e78:	7c 89       	ldd	r23, Y+20	; 0x14
     e7a:	8d 89       	ldd	r24, Y+21	; 0x15
     e7c:	9e 89       	ldd	r25, Y+22	; 0x16
     e7e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     e82:	88 23       	and	r24, r24
     e84:	2c f4       	brge	.+10     	; 0xe90 <LCD_sendCommand+0x24c>
		__ticks = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	98 8f       	std	Y+24, r25	; 0x18
     e8c:	8f 8b       	std	Y+23, r24	; 0x17
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	6b 89       	ldd	r22, Y+19	; 0x13
     e9a:	7c 89       	ldd	r23, Y+20	; 0x14
     e9c:	8d 89       	ldd	r24, Y+21	; 0x15
     e9e:	9e 89       	ldd	r25, Y+22	; 0x16
     ea0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f5       	brge	.+82     	; 0xefa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	6f 85       	ldd	r22, Y+15	; 0x0f
     eb2:	78 89       	ldd	r23, Y+16	; 0x10
     eb4:	89 89       	ldd	r24, Y+17	; 0x11
     eb6:	9a 89       	ldd	r25, Y+18	; 0x12
     eb8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	98 8f       	std	Y+24, r25	; 0x18
     ece:	8f 8b       	std	Y+23, r24	; 0x17
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <LCD_sendCommand+0x2ac>
     ed2:	88 ec       	ldi	r24, 0xC8	; 200
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9a 8f       	std	Y+26, r25	; 0x1a
     ed8:	89 8f       	std	Y+25, r24	; 0x19
     eda:	89 8d       	ldd	r24, Y+25	; 0x19
     edc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCD_sendCommand+0x29a>
     ee2:	9a 8f       	std	Y+26, r25	; 0x1a
     ee4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	98 8f       	std	Y+24, r25	; 0x18
     eee:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef0:	8f 89       	ldd	r24, Y+23	; 0x17
     ef2:	98 8d       	ldd	r25, Y+24	; 0x18
     ef4:	89 2b       	or	r24, r25
     ef6:	69 f7       	brne	.-38     	; 0xed2 <LCD_sendCommand+0x28e>
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	6b 89       	ldd	r22, Y+19	; 0x13
     efc:	7c 89       	ldd	r23, Y+20	; 0x14
     efe:	8d 89       	ldd	r24, Y+21	; 0x15
     f00:	9e 89       	ldd	r25, Y+22	; 0x16
     f02:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	98 8f       	std	Y+24, r25	; 0x18
     f0c:	8f 8b       	std	Y+23, r24	; 0x17
     f0e:	8f 89       	ldd	r24, Y+23	; 0x17
     f10:	98 8d       	ldd	r25, Y+24	; 0x18
     f12:	9c 8f       	std	Y+28, r25	; 0x1c
     f14:	8b 8f       	std	Y+27, r24	; 0x1b
     f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_sendCommand+0x2d6>
     f1e:	9c 8f       	std	Y+28, r25	; 0x1c
     f20:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(1); /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a0 e8       	ldi	r26, 0x80	; 128
     f32:	bf e3       	ldi	r27, 0x3F	; 63
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	ab 83       	std	Y+3, r26	; 0x03
     f3a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a ef       	ldi	r20, 0xFA	; 250
     f42:	54 e4       	ldi	r21, 0x44	; 68
     f44:	69 81       	ldd	r22, Y+1	; 0x01
     f46:	7a 81       	ldd	r23, Y+2	; 0x02
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8d 83       	std	Y+5, r24	; 0x05
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	af 83       	std	Y+7, r26	; 0x07
     f5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e8       	ldi	r20, 0x80	; 128
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	6d 81       	ldd	r22, Y+5	; 0x05
     f66:	7e 81       	ldd	r23, Y+6	; 0x06
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	98 85       	ldd	r25, Y+8	; 0x08
     f6c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
     f70:	88 23       	and	r24, r24
     f72:	2c f4       	brge	.+10     	; 0xf7e <LCD_sendCommand+0x33a>
		__ticks = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9a 87       	std	Y+10, r25	; 0x0a
     f7a:	89 87       	std	Y+9, r24	; 0x09
     f7c:	3f c0       	rjmp	.+126    	; 0xffc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	6d 81       	ldd	r22, Y+5	; 0x05
     f88:	7e 81       	ldd	r23, Y+6	; 0x06
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	98 85       	ldd	r25, Y+8	; 0x08
     f8e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
     f92:	18 16       	cp	r1, r24
     f94:	4c f5       	brge	.+82     	; 0xfe8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	69 81       	ldd	r22, Y+1	; 0x01
     fa0:	7a 81       	ldd	r23, Y+2	; 0x02
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	9a 87       	std	Y+10, r25	; 0x0a
     fbc:	89 87       	std	Y+9, r24	; 0x09
     fbe:	0f c0       	rjmp	.+30     	; 0xfde <LCD_sendCommand+0x39a>
     fc0:	88 ec       	ldi	r24, 0xC8	; 200
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 87       	std	Y+12, r25	; 0x0c
     fc6:	8b 87       	std	Y+11, r24	; 0x0b
     fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fca:	9c 85       	ldd	r25, Y+12	; 0x0c
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <LCD_sendCommand+0x388>
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	9a 87       	std	Y+10, r25	; 0x0a
     fdc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe2:	89 2b       	or	r24, r25
     fe4:	69 f7       	brne	.-38     	; 0xfc0 <LCD_sendCommand+0x37c>
    _delay_ms(1); /* Delay for processing (Th = 13ns) */
}
     fe6:	14 c0       	rjmp	.+40     	; 0x1010 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe8:	6d 81       	ldd	r22, Y+5	; 0x05
     fea:	7e 81       	ldd	r23, Y+6	; 0x06
     fec:	8f 81       	ldd	r24, Y+7	; 0x07
     fee:	98 85       	ldd	r25, Y+8	; 0x08
     ff0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	9a 87       	std	Y+10, r25	; 0x0a
     ffa:	89 87       	std	Y+9, r24	; 0x09
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	9e 87       	std	Y+14, r25	; 0x0e
    1002:	8d 87       	std	Y+13, r24	; 0x0d
    1004:	8d 85       	ldd	r24, Y+13	; 0x0d
    1006:	9e 85       	ldd	r25, Y+14	; 0x0e
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LCD_sendCommand+0x3c4>
    100c:	9e 87       	std	Y+14, r25	; 0x0e
    100e:	8d 87       	std	Y+13, r24	; 0x0d
    1010:	00 00       	nop
    1012:	e9 96       	adiw	r28, 0x39	; 57
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <LCD_displayCharacter>:
 *
 * Parameters:
 * - data: Character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	e9 97       	sbiw	r28, 0x39	; 57
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	89 af       	std	Y+57, r24	; 0x39
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e8       	ldi	r26, 0x80	; 128
    104a:	bf e3       	ldi	r27, 0x3F	; 63
    104c:	8b a7       	std	Y+43, r24	; 0x2b
    104e:	9c a7       	std	Y+44, r25	; 0x2c
    1050:	ad a7       	std	Y+45, r26	; 0x2d
    1052:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	6b a5       	ldd	r22, Y+43	; 0x2b
    105e:	7c a5       	ldd	r23, Y+44	; 0x2c
    1060:	8d a5       	ldd	r24, Y+45	; 0x2d
    1062:	9e a5       	ldd	r25, Y+46	; 0x2e
    1064:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	8f a7       	std	Y+47, r24	; 0x2f
    106e:	98 ab       	std	Y+48, r25	; 0x30
    1070:	a9 ab       	std	Y+49, r26	; 0x31
    1072:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	6f a5       	ldd	r22, Y+47	; 0x2f
    107e:	78 a9       	ldd	r23, Y+48	; 0x30
    1080:	89 a9       	ldd	r24, Y+49	; 0x31
    1082:	9a a9       	ldd	r25, Y+50	; 0x32
    1084:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <LCD_displayCharacter+0x72>
		__ticks = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9c ab       	std	Y+52, r25	; 0x34
    1092:	8b ab       	std	Y+51, r24	; 0x33
    1094:	3f c0       	rjmp	.+126    	; 0x1114 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	6f a5       	ldd	r22, Y+47	; 0x2f
    10a0:	78 a9       	ldd	r23, Y+48	; 0x30
    10a2:	89 a9       	ldd	r24, Y+49	; 0x31
    10a4:	9a a9       	ldd	r25, Y+50	; 0x32
    10a6:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	4c f5       	brge	.+82     	; 0x1100 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	6b a5       	ldd	r22, Y+43	; 0x2b
    10b8:	7c a5       	ldd	r23, Y+44	; 0x2c
    10ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    10bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    10be:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9c ab       	std	Y+52, r25	; 0x34
    10d4:	8b ab       	std	Y+51, r24	; 0x33
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <LCD_displayCharacter+0xd2>
    10d8:	88 ec       	ldi	r24, 0xC8	; 200
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e ab       	std	Y+54, r25	; 0x36
    10de:	8d ab       	std	Y+53, r24	; 0x35
    10e0:	8d a9       	ldd	r24, Y+53	; 0x35
    10e2:	9e a9       	ldd	r25, Y+54	; 0x36
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCD_displayCharacter+0xc0>
    10e8:	9e ab       	std	Y+54, r25	; 0x36
    10ea:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ec:	8b a9       	ldd	r24, Y+51	; 0x33
    10ee:	9c a9       	ldd	r25, Y+52	; 0x34
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	9c ab       	std	Y+52, r25	; 0x34
    10f4:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f6:	8b a9       	ldd	r24, Y+51	; 0x33
    10f8:	9c a9       	ldd	r25, Y+52	; 0x34
    10fa:	89 2b       	or	r24, r25
    10fc:	69 f7       	brne	.-38     	; 0x10d8 <LCD_displayCharacter+0xb4>
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1100:	6f a5       	ldd	r22, Y+47	; 0x2f
    1102:	78 a9       	ldd	r23, Y+48	; 0x30
    1104:	89 a9       	ldd	r24, Y+49	; 0x31
    1106:	9a a9       	ldd	r25, Y+50	; 0x32
    1108:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9c ab       	std	Y+52, r25	; 0x34
    1112:	8b ab       	std	Y+51, r24	; 0x33
    1114:	8b a9       	ldd	r24, Y+51	; 0x33
    1116:	9c a9       	ldd	r25, Y+52	; 0x34
    1118:	98 af       	std	Y+56, r25	; 0x38
    111a:	8f ab       	std	Y+55, r24	; 0x37
    111c:	8f a9       	ldd	r24, Y+55	; 0x37
    111e:	98 ad       	ldd	r25, Y+56	; 0x38
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <LCD_displayCharacter+0xfc>
    1124:	98 af       	std	Y+56, r25	; 0x38
    1126:	8f ab       	std	Y+55, r24	; 0x37
    _delay_ms(1); /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a0 e8       	ldi	r26, 0x80	; 128
    1138:	bf e3       	ldi	r27, 0x3F	; 63
    113a:	8d 8f       	std	Y+29, r24	; 0x1d
    113c:	9e 8f       	std	Y+30, r25	; 0x1e
    113e:	af 8f       	std	Y+31, r26	; 0x1f
    1140:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    114c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    114e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1150:	98 a1       	ldd	r25, Y+32	; 0x20
    1152:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	89 a3       	std	Y+33, r24	; 0x21
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	ab a3       	std	Y+35, r26	; 0x23
    1160:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	69 a1       	ldd	r22, Y+33	; 0x21
    116c:	7a a1       	ldd	r23, Y+34	; 0x22
    116e:	8b a1       	ldd	r24, Y+35	; 0x23
    1170:	9c a1       	ldd	r25, Y+36	; 0x24
    1172:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    1176:	88 23       	and	r24, r24
    1178:	2c f4       	brge	.+10     	; 0x1184 <LCD_displayCharacter+0x160>
		__ticks = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9e a3       	std	Y+38, r25	; 0x26
    1180:	8d a3       	std	Y+37, r24	; 0x25
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	69 a1       	ldd	r22, Y+33	; 0x21
    118e:	7a a1       	ldd	r23, Y+34	; 0x22
    1190:	8b a1       	ldd	r24, Y+35	; 0x23
    1192:	9c a1       	ldd	r25, Y+36	; 0x24
    1194:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    1198:	18 16       	cp	r1, r24
    119a:	4c f5       	brge	.+82     	; 0x11ee <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    11a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    11a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11aa:	98 a1       	ldd	r25, Y+32	; 0x20
    11ac:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	9e a3       	std	Y+38, r25	; 0x26
    11c2:	8d a3       	std	Y+37, r24	; 0x25
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <LCD_displayCharacter+0x1c0>
    11c6:	88 ec       	ldi	r24, 0xC8	; 200
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	98 a7       	std	Y+40, r25	; 0x28
    11cc:	8f a3       	std	Y+39, r24	; 0x27
    11ce:	8f a1       	ldd	r24, Y+39	; 0x27
    11d0:	98 a5       	ldd	r25, Y+40	; 0x28
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <LCD_displayCharacter+0x1ae>
    11d6:	98 a7       	std	Y+40, r25	; 0x28
    11d8:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11da:	8d a1       	ldd	r24, Y+37	; 0x25
    11dc:	9e a1       	ldd	r25, Y+38	; 0x26
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	9e a3       	std	Y+38, r25	; 0x26
    11e2:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e4:	8d a1       	ldd	r24, Y+37	; 0x25
    11e6:	9e a1       	ldd	r25, Y+38	; 0x26
    11e8:	89 2b       	or	r24, r25
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <LCD_displayCharacter+0x1a2>
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ee:	69 a1       	ldd	r22, Y+33	; 0x21
    11f0:	7a a1       	ldd	r23, Y+34	; 0x22
    11f2:	8b a1       	ldd	r24, Y+35	; 0x23
    11f4:	9c a1       	ldd	r25, Y+36	; 0x24
    11f6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9e a3       	std	Y+38, r25	; 0x26
    1200:	8d a3       	std	Y+37, r24	; 0x25
    1202:	8d a1       	ldd	r24, Y+37	; 0x25
    1204:	9e a1       	ldd	r25, Y+38	; 0x26
    1206:	9a a7       	std	Y+42, r25	; 0x2a
    1208:	89 a7       	std	Y+41, r24	; 0x29
    120a:	89 a5       	ldd	r24, Y+41	; 0x29
    120c:	9a a5       	ldd	r25, Y+42	; 0x2a
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <LCD_displayCharacter+0x1ea>
    1212:	9a a7       	std	Y+42, r25	; 0x2a
    1214:	89 a7       	std	Y+41, r24	; 0x29
    _delay_ms(1); /* Delay for processing (Tpw - Tdws = 190ns) */
    GPIO_writePort(LCD_DATA_PORT_ID, data); /* Output data to data bus (D0 --> D7) */
    1216:	69 ad       	ldd	r22, Y+57	; 0x39
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 a6 01 	call	0x34c	; 0x34c <GPIO_writePort>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a0 e8       	ldi	r26, 0x80	; 128
    1224:	bf e3       	ldi	r27, 0x3F	; 63
    1226:	8f 87       	std	Y+15, r24	; 0x0f
    1228:	98 8b       	std	Y+16, r25	; 0x10
    122a:	a9 8b       	std	Y+17, r26	; 0x11
    122c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a ef       	ldi	r20, 0xFA	; 250
    1234:	54 e4       	ldi	r21, 0x44	; 68
    1236:	6f 85       	ldd	r22, Y+15	; 0x0f
    1238:	78 89       	ldd	r23, Y+16	; 0x10
    123a:	89 89       	ldd	r24, Y+17	; 0x11
    123c:	9a 89       	ldd	r25, Y+18	; 0x12
    123e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8b 8b       	std	Y+19, r24	; 0x13
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	ad 8b       	std	Y+21, r26	; 0x15
    124c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	6b 89       	ldd	r22, Y+19	; 0x13
    1258:	7c 89       	ldd	r23, Y+20	; 0x14
    125a:	8d 89       	ldd	r24, Y+21	; 0x15
    125c:	9e 89       	ldd	r25, Y+22	; 0x16
    125e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	98 8f       	std	Y+24, r25	; 0x18
    126c:	8f 8b       	std	Y+23, r24	; 0x17
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	6b 89       	ldd	r22, Y+19	; 0x13
    127a:	7c 89       	ldd	r23, Y+20	; 0x14
    127c:	8d 89       	ldd	r24, Y+21	; 0x15
    127e:	9e 89       	ldd	r25, Y+22	; 0x16
    1280:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	6f 85       	ldd	r22, Y+15	; 0x0f
    1292:	78 89       	ldd	r23, Y+16	; 0x10
    1294:	89 89       	ldd	r24, Y+17	; 0x11
    1296:	9a 89       	ldd	r25, Y+18	; 0x12
    1298:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	98 8f       	std	Y+24, r25	; 0x18
    12ae:	8f 8b       	std	Y+23, r24	; 0x17
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <LCD_displayCharacter+0x2ac>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9a 8f       	std	Y+26, r25	; 0x1a
    12b8:	89 8f       	std	Y+25, r24	; 0x19
    12ba:	89 8d       	ldd	r24, Y+25	; 0x19
    12bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_displayCharacter+0x29a>
    12c2:	9a 8f       	std	Y+26, r25	; 0x1a
    12c4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8f 89       	ldd	r24, Y+23	; 0x17
    12c8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	98 8f       	std	Y+24, r25	; 0x18
    12ce:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	89 2b       	or	r24, r25
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <LCD_displayCharacter+0x28e>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6b 89       	ldd	r22, Y+19	; 0x13
    12dc:	7c 89       	ldd	r23, Y+20	; 0x14
    12de:	8d 89       	ldd	r24, Y+21	; 0x15
    12e0:	9e 89       	ldd	r25, Y+22	; 0x16
    12e2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	98 8f       	std	Y+24, r25	; 0x18
    12ec:	8f 8b       	std	Y+23, r24	; 0x17
    12ee:	8f 89       	ldd	r24, Y+23	; 0x17
    12f0:	98 8d       	ldd	r25, Y+24	; 0x18
    12f2:	9c 8f       	std	Y+28, r25	; 0x1c
    12f4:	8b 8f       	std	Y+27, r24	; 0x1b
    12f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCD_displayCharacter+0x2d6>
    12fe:	9c 8f       	std	Y+28, r25	; 0x1c
    1300:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(1); /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e8       	ldi	r26, 0x80	; 128
    1312:	bf e3       	ldi	r27, 0x3F	; 63
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	ab 83       	std	Y+3, r26	; 0x03
    131a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a ef       	ldi	r20, 0xFA	; 250
    1322:	54 e4       	ldi	r21, 0x44	; 68
    1324:	69 81       	ldd	r22, Y+1	; 0x01
    1326:	7a 81       	ldd	r23, Y+2	; 0x02
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	af 83       	std	Y+7, r26	; 0x07
    133a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	6d 81       	ldd	r22, Y+5	; 0x05
    1346:	7e 81       	ldd	r23, Y+6	; 0x06
    1348:	8f 81       	ldd	r24, Y+7	; 0x07
    134a:	98 85       	ldd	r25, Y+8	; 0x08
    134c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9a 87       	std	Y+10, r25	; 0x0a
    135a:	89 87       	std	Y+9, r24	; 0x09
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	7a 81       	ldd	r23, Y+2	; 0x02
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9a 87       	std	Y+10, r25	; 0x0a
    139c:	89 87       	std	Y+9, r24	; 0x09
    139e:	0f c0       	rjmp	.+30     	; 0x13be <LCD_displayCharacter+0x39a>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	8b 87       	std	Y+11, r24	; 0x0b
    13a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_displayCharacter+0x388>
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9a 87       	std	Y+10, r25	; 0x0a
    13bc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	89 2b       	or	r24, r25
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <LCD_displayCharacter+0x37c>
    _delay_ms(1); /* Delay for processing (Th = 13ns) */
}
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ca:	7e 81       	ldd	r23, Y+6	; 0x06
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9a 87       	std	Y+10, r25	; 0x0a
    13da:	89 87       	std	Y+9, r24	; 0x09
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	9e 87       	std	Y+14, r25	; 0x0e
    13e2:	8d 87       	std	Y+13, r24	; 0x0d
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <LCD_displayCharacter+0x3c4>
    13ec:	9e 87       	std	Y+14, r25	; 0x0e
    13ee:	8d 87       	std	Y+13, r24	; 0x0d
    13f0:	00 00       	nop
    13f2:	e9 96       	adiw	r28, 0x39	; 57
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <LCD_displayString>:
 *
 * Parameters:
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	00 d0       	rcall	.+0      	; 0x140a <LCD_displayString+0x6>
    140a:	1f 92       	push	r1
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	9b 83       	std	Y+3, r25	; 0x03
    1412:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1414:	19 82       	std	Y+1, r1	; 0x01
    while (Str[i] != '\0')
    1416:	0e c0       	rjmp	.+28     	; 0x1434 <LCD_displayString+0x30>
    {
        LCD_displayCharacter(Str[i]);
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	2a 81       	ldd	r18, Y+2	; 0x02
    1420:	3b 81       	ldd	r19, Y+3	; 0x03
    1422:	82 0f       	add	r24, r18
    1424:	93 1f       	adc	r25, r19
    1426:	fc 01       	movw	r30, r24
    1428:	80 81       	ld	r24, Z
    142a:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_displayCharacter>
        i++;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	2a 81       	ldd	r18, Y+2	; 0x02
    143c:	3b 81       	ldd	r19, Y+3	; 0x03
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	fc 01       	movw	r30, r24
    1444:	80 81       	ld	r24, Z
    1446:	88 23       	and	r24, r24
    1448:	39 f7       	brne	.-50     	; 0x1418 <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);
        i++;
    }
}
    144a:	00 00       	nop
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <LCD_moveCursor>:
 * Parameters:
 * - row: Row index (0 to 1 for a 2-line display).
 * - col: Column index (0 to 15 for a 16-column display).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	00 d0       	rcall	.+0      	; 0x145e <LCD_moveCursor+0x6>
    145e:	1f 92       	push	r1
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    switch(row)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	19 f0       	breq	.+6      	; 0x1478 <LCD_moveCursor+0x20>
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	21 f0       	breq	.+8      	; 0x147e <LCD_moveCursor+0x26>
    1476:	07 c0       	rjmp	.+14     	; 0x1486 <LCD_moveCursor+0x2e>
    {
        case 0:
            lcd_memory_address = col;
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	89 83       	std	Y+1, r24	; 0x01
            break;
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <LCD_moveCursor+0x2e>
        case 1:
            lcd_memory_address = col + 0x40;
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	80 5c       	subi	r24, 0xC0	; 192
    1482:	89 83       	std	Y+1, r24	; 0x01
            break;
    1484:	00 00       	nop
        /* Add cases for additional rows if needed */
    }

    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	80 68       	ori	r24, 0x80	; 128
    148a:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
}
    148e:	00 00       	nop
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <LCD_displayStringRowColumn>:
 * - row: Row index (0 to 1 for a 2-line display).
 * - col: Column index (0 to 15 for a 16-column display).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <LCD_displayStringRowColumn+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <LCD_displayStringRowColumn+0x8>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	6a 83       	std	Y+2, r22	; 0x02
    14ac:	5c 83       	std	Y+4, r21	; 0x04
    14ae:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col); /* Move cursor to specified position */
    14b0:	6a 81       	ldd	r22, Y+2	; 0x02
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_moveCursor>
    LCD_displayString(Str); /* Display the string */
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_displayString>
}
    14c0:	00 00       	nop
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <LCD_integerToString>:
 *
 * Parameters:
 * - data: Integer value to be converted and displayed.
 */
void LCD_integerToString(int data)
{
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	66 97       	sbiw	r28, 0x16	; 22
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	9e 8b       	std	Y+22, r25	; 0x16
    14e6:	8d 8b       	std	Y+21, r24	; 0x15
	char buff[20]; /* String to hold the ascii result */
	itoa(data,buff,10);
    14e8:	8d 89       	ldd	r24, Y+21	; 0x15
    14ea:	9e 89       	ldd	r25, Y+22	; 0x16
    14ec:	4a e0       	ldi	r20, 0x0A	; 10
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	9e 01       	movw	r18, r28
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	b9 01       	movw	r22, r18
    14f8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <itoa>
	LCD_displayString(buff); /* Display the string */
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_displayString>
}
    1504:	00 00       	nop
    1506:	66 96       	adiw	r28, 0x16	; 22
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <LCD_clearScreen>:
/*
 * Description:
 * Clears the LCD screen by sending the clear display command.
 */
void LCD_clearScreen(void)
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_sendCommand>
}
    1526:	00 00       	nop
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <LCD_enterKeyMessage>:

void LCD_enterKeyMessage (const char* key)
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <LCD_enterKeyMessage+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    153c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_moveCursor>
	LCD_displayString(key);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_displayString>
	LCD_moveCursor(1,0);
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_moveCursor>
}
    1558:	00 00       	nop
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <main>:
    .prescaler = F_CPU_1024,           /* Pre-scaler value for the timer clock */
    .mode = COMPARE_MODE               /* Mode of operation for the timer */
};

int main (void)
{
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 d0       	rcall	.+0      	; 0x156a <main+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <main+0x8>
    156c:	1f 92       	push	r1
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    /* Enable global interrupts */
    sei();
    1572:	78 94       	sei
     * Error Checking: Even Parity
     * Stop bits: one
     */

    /* Set the timer callback function */
    Timer1_setCallBack(Timer_countTicks);
    1574:	86 e6       	ldi	r24, 0x66	; 102
    1576:	9d e0       	ldi	r25, 0x0D	; 13
    1578:	0e 94 15 02 	call	0x42a	; 0x42a <Timer1_setCallBack>

    /* Initialize UART with the specified configurations */
    UART_ConfigType uart_config = {BAUD_RATE_9600, EIGHT_BITS, EVEN, ONE_BIT};
    157c:	25 e0       	ldi	r18, 0x05	; 5
    157e:	e0 e8       	ldi	r30, 0x80	; 128
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	dc 01       	movw	r26, r24
    1588:	01 90       	ld	r0, Z+
    158a:	0d 92       	st	X+, r0
    158c:	2a 95       	dec	r18
    158e:	e1 f7       	brne	.-8      	; 0x1588 <main+0x24>
    UART_init(&uart_config);
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <UART_init>

    /* Initialize the LCD to start displaying */
    LCD_init();
    1598:	0e 94 85 05 	call	0xb0a	; 0xb0a <LCD_init>

    while(1)
    {
        /* Check the system status and call appropriate menu functions */
        if (g_status == REGISTER || g_passwordIsSet == False)
    159c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	21 f0       	breq	.+8      	; 0x15ac <main+0x48>
    15a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_passwordIsSet>
    15a8:	88 23       	and	r24, r24
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <main+0x4e>
        {
            /* Call the registration menu if status is REGISTER or no password is set */
            APP_registerMenu();
    15ac:	0e 94 86 0b 	call	0x170c	; 0x170c <APP_registerMenu>
    15b0:	11 c0       	rjmp	.+34     	; 0x15d4 <main+0x70>
        }
        else if (g_status == MAIN)
    15b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15b6:	88 23       	and	r24, r24
    15b8:	19 f4       	brne	.+6      	; 0x15c0 <main+0x5c>
        {
            /* Call the main menu if status is MAIN */
            APP_mainMenu();
    15ba:	0e 94 cf 0b 	call	0x179e	; 0x179e <APP_mainMenu>
    15be:	ee cf       	rjmp	.-36     	; 0x159c <main+0x38>
        }
        else if (g_status == LOGIN_CHANGE_PASS || g_status == LOGIN_DOOR_OPEN)
    15c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <main+0x6c>
    15c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	31 f7       	brne	.-52     	; 0x159c <main+0x38>
        {
            /* Call the login menu if status is LOGIN_CHANGE_PASS or LOGIN_DOOR_OPEN */
            APP_loginMenu();
    15d0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <APP_loginMenu>
    LCD_init();

    while(1)
    {
        /* Check the system status and call appropriate menu functions */
        if (g_status == REGISTER || g_passwordIsSet == False)
    15d4:	e3 cf       	rjmp	.-58     	; 0x159c <main+0x38>

000015d6 <APP_loginMenu>:
    }
}

/* Function to handle the login menu */
void APP_loginMenu(void)
{
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    g_input_password = 0;
    15de:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <g_input_password>

    while (1)
    {
        /* Check the login status */
        if (g_status != LOGIN_CHANGE_PASS && g_status != LOGIN_DOOR_OPEN)
    15e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <APP_loginMenu+0x1e>
    15ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <APP_loginMenu+0x1e>
    15f2:	88 c0       	rjmp	.+272    	; 0x1704 <APP_loginMenu+0x12e>
            break;
        }
        else
        {
            /* Prompt user to enter password */
            LCD_enterKeyMessage("Enter Password: ");
    15f4:	85 e8       	ldi	r24, 0x85	; 133
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 97 0a 	call	0x152e	; 0x152e <LCD_enterKeyMessage>

            /* Get the password from the keypad */
            APP_keypadToVariable(&g_input_password);
    15fc:	8e e4       	ldi	r24, 0x4E	; 78
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 93 0c 	call	0x1926	; 0x1926 <APP_keypadToVariable>

            /* Check if the entered password is correct */
            if (APP_checkPassword(g_input_password))
    1604:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <g_input_password>
    1608:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <APP_checkPassword>
    160c:	88 23       	and	r24, r24
    160e:	d1 f1       	breq	.+116    	; 0x1684 <APP_loginMenu+0xae>
            {
                g_semph = 3;
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_semph>

                if (g_status == LOGIN_CHANGE_PASS)
    1616:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	21 f4       	brne	.+8      	; 0x1626 <APP_loginMenu+0x50>
                {
                    /* Change status to register if changing password */
                    g_status = REGISTER;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_status>
                    Timer_delaySeconds(15);

                    /* Change status to main */
                    g_status = MAIN;
                }
                break;
    1624:	6e c0       	rjmp	.+220    	; 0x1702 <APP_loginMenu+0x12c>
                if (g_status == LOGIN_CHANGE_PASS)
                {
                    /* Change status to register if changing password */
                    g_status = REGISTER;
                }
                else if (g_status == LOGIN_DOOR_OPEN)
    1626:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	09 f0       	breq	.+2      	; 0x1630 <APP_loginMenu+0x5a>
    162e:	69 c0       	rjmp	.+210    	; 0x1702 <APP_loginMenu+0x12c>
                {
                    /* Send command to open the door */
                    UART_sendByte(CODE_OPEN_DOOR);
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>

                    /* Display door unlocking message */
                    LCD_clearScreen();
    1636:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                    LCD_displayStringRowColumn(0, 0, "Door unlocking");
    163a:	46 e9       	ldi	r20, 0x96	; 150
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                    Timer_delaySeconds(15);
    1646:	8f e0       	ldi	r24, 0x0F	; 15
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>

                    /* Display door open message */
                    LCD_clearScreen();
    164e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                    LCD_displayStringRowColumn(0, 0, "Door open");
    1652:	45 ea       	ldi	r20, 0xA5	; 165
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                    Timer_delaySeconds(3);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>

                    /* Display door locking message */
                    LCD_clearScreen();
    1666:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                    LCD_displayStringRowColumn(0, 0, "Door locking");
    166a:	4f ea       	ldi	r20, 0xAF	; 175
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                    Timer_delaySeconds(15);
    1676:	8f e0       	ldi	r24, 0x0F	; 15
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>

                    /* Change status to main */
                    g_status = MAIN;
    167e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <g_status>
                }
                break;
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <APP_loginMenu+0x12c>
            }
            else
            {
                /* Decrement semaphore count */
                g_semph--;
    1684:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_semph>
    1688:	81 50       	subi	r24, 0x01	; 1
    168a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_semph>

                if (g_semph == 0)
    168e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_semph>
    1692:	88 23       	and	r24, r24
    1694:	d9 f4       	brne	.+54     	; 0x16cc <APP_loginMenu+0xf6>
                {
                    /* Lock the system for 60 seconds if attempts exhausted */
                    LCD_clearScreen();
    1696:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                    LCD_displayStringRowColumn(0, 0, "LOCKED FOR");
    169a:	4c eb       	ldi	r20, 0xBC	; 188
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                    LCD_displayStringRowColumn(1, 0, "60 SECONDS");
    16a6:	47 ec       	ldi	r20, 0xC7	; 199
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>

                    UART_sendByte(CODE_ACTIVATE_BUZZER);
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>
                    Timer_delaySeconds(60);
    16b8:	8c e3       	ldi	r24, 0x3C	; 60
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>
                    g_semph = 3;
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_semph>

                    g_status = MAIN;
    16c6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <g_status>
    16ca:	8b cf       	rjmp	.-234    	; 0x15e2 <APP_loginMenu+0xc>
                }
                else
                {
                    /* Display wrong password message and remaining attempts */
                    LCD_clearScreen();
    16cc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                    LCD_displayStringRowColumn(0, 0, "Wrong Password");
    16d0:	42 ed       	ldi	r20, 0xD2	; 210
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                    LCD_moveCursor(1, 0);
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_moveCursor>
                    LCD_integerToString(g_semph);
    16e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_semph>
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_integerToString>
                    LCD_displayString(" tries left");
    16f0:	81 ee       	ldi	r24, 0xE1	; 225
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_displayString>

                    Timer_delaySeconds(1);
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>
                    break;
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <APP_loginMenu+0x12e>
                    Timer_delaySeconds(15);

                    /* Change status to main */
                    g_status = MAIN;
                }
                break;
    1702:	00 00       	nop
                    break;
                }
            }
        }
    }
}
    1704:	00 00       	nop
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <APP_registerMenu>:


void APP_registerMenu(void)
{
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    APP_deinit_passwords();  /* Clear any previously set passwords */
    1714:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <APP_deinit_passwords>
    while (1)
    {
        if (g_status != REGISTER)  /* Exit the loop if the status is not REGISTER */
    1718:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	d1 f5       	brne	.+116    	; 0x1794 <APP_registerMenu+0x88>
        {
            break;
        }
        else
        {
            if (g_new_password == 0)  /* Prompt for new password if not already set */
    1720:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <g_new_password>
    1724:	88 23       	and	r24, r24
    1726:	81 f4       	brne	.+32     	; 0x1748 <APP_registerMenu+0x3c>
            {
                LCD_enterKeyMessage("New Password: ");
    1728:	8d ee       	ldi	r24, 0xED	; 237
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 97 0a 	call	0x152e	; 0x152e <LCD_enterKeyMessage>
                APP_keypadToVariable(&g_new_password);  /* Store the new password */
    1730:	8c e4       	ldi	r24, 0x4C	; 76
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	0e 94 93 0c 	call	0x1926	; 0x1926 <APP_keypadToVariable>

                LCD_enterKeyMessage("Confirm: ");
    1738:	8c ef       	ldi	r24, 0xFC	; 252
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 97 0a 	call	0x152e	; 0x152e <LCD_enterKeyMessage>
                APP_keypadToVariable(&g_confirm_password);  /* Store the confirmation password */
    1740:	8d e4       	ldi	r24, 0x4D	; 77
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	0e 94 93 0c 	call	0x1926	; 0x1926 <APP_keypadToVariable>
            }

            if (g_new_password != g_confirm_password)  /* Check if the new password matches the confirmation password */
    1748:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_new_password>
    174c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <g_confirm_password>
    1750:	98 17       	cp	r25, r24
    1752:	99 f0       	breq	.+38     	; 0x177a <APP_registerMenu+0x6e>
            {
                LCD_clearScreen();
    1754:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
                LCD_displayStringRowColumn(0, 0, "No Match");  /* Display message for no match */
    1758:	46 e0       	ldi	r20, 0x06	; 6
    175a:	51 e0       	ldi	r21, 0x01	; 1
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                LCD_displayStringRowColumn(1, 0, "Try again...");
    1764:	4f e0       	ldi	r20, 0x0F	; 15
    1766:	51 e0       	ldi	r21, 0x01	; 1
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
                Timer_delaySeconds(1);  /* Delay for user to read the message */
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Timer_delaySeconds>

                break;
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <APP_registerMenu+0x8a>
            }
            else
            {
                g_passwordIsSet = True;  /* Set the flag indicating the password has been set */
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <g_passwordIsSet>

                UART_sendByte(CODE_SAVE_PASSWORD);  /* Send save password code via UART */
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>
                UART_sendByte(g_new_password);  /* Send the new password via UART */
    1786:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <g_new_password>
    178a:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>

                g_status = MAIN;  /* Update the status to MAIN */
    178e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <g_status>
                break;
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <APP_registerMenu+0x8a>
    APP_deinit_passwords();  /* Clear any previously set passwords */
    while (1)
    {
        if (g_status != REGISTER)  /* Exit the loop if the status is not REGISTER */
        {
            break;
    1794:	00 00       	nop
                g_status = MAIN;  /* Update the status to MAIN */
                break;
            }
        }
    }
}
    1796:	00 00       	nop
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <APP_mainMenu>:

/* Function to handle the main menu */
void APP_mainMenu(void)
{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	2f 97       	sbiw	r28, 0x0f	; 15
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    {
        uint8 key;

        /* Clear the LCD and display main menu options */
        LCD_clearScreen();
    17b2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_clearScreen>
        LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    17b6:	4c e1       	ldi	r20, 0x1C	; 28
    17b8:	51 e0       	ldi	r21, 0x01	; 1
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
        LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    17c2:	4a e2       	ldi	r20, 0x2A	; 42
    17c4:	51 e0       	ldi	r21, 0x01	; 1
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>

        while (1)
        {
            /* Check if the status has changed */
            if (g_status != MAIN)
    17ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_status>
    17d2:	88 23       	and	r24, r24
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <APP_mainMenu+0x3a>
    17d6:	84 c0       	rjmp	.+264    	; 0x18e0 <APP_mainMenu+0x142>
                break;
            }
            else
            {
                /* Get the pressed key from the keypad */
                key = KEYPAD_getPressedKey();
    17d8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <KEYPAD_getPressedKey>
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a8 e4       	ldi	r26, 0x48	; 72
    17e4:	b3 e4       	ldi	r27, 0x43	; 67
    17e6:	8a 83       	std	Y+2, r24	; 0x02
    17e8:	9b 83       	std	Y+3, r25	; 0x03
    17ea:	ac 83       	std	Y+4, r26	; 0x04
    17ec:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	6a 81       	ldd	r22, Y+2	; 0x02
    17f8:	7b 81       	ldd	r23, Y+3	; 0x03
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8e 83       	std	Y+6, r24	; 0x06
    1808:	9f 83       	std	Y+7, r25	; 0x07
    180a:	a8 87       	std	Y+8, r26	; 0x08
    180c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	6e 81       	ldd	r22, Y+6	; 0x06
    1818:	7f 81       	ldd	r23, Y+7	; 0x07
    181a:	88 85       	ldd	r24, Y+8	; 0x08
    181c:	99 85       	ldd	r25, Y+9	; 0x09
    181e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <APP_mainMenu+0x92>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9b 87       	std	Y+11, r25	; 0x0b
    182c:	8a 87       	std	Y+10, r24	; 0x0a
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <APP_mainMenu+0x110>
	else if (__tmp > 65535)
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	6e 81       	ldd	r22, Y+6	; 0x06
    183a:	7f 81       	ldd	r23, Y+7	; 0x07
    183c:	88 85       	ldd	r24, Y+8	; 0x08
    183e:	99 85       	ldd	r25, Y+9	; 0x09
    1840:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <APP_mainMenu+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	6a 81       	ldd	r22, Y+2	; 0x02
    1852:	7b 81       	ldd	r23, Y+3	; 0x03
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9b 87       	std	Y+11, r25	; 0x0b
    186e:	8a 87       	std	Y+10, r24	; 0x0a
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <APP_mainMenu+0xf2>
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9d 87       	std	Y+13, r25	; 0x0d
    1878:	8c 87       	std	Y+12, r24	; 0x0c
    187a:	8c 85       	ldd	r24, Y+12	; 0x0c
    187c:	9d 85       	ldd	r25, Y+13	; 0x0d
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <APP_mainMenu+0xe0>
    1882:	9d 87       	std	Y+13, r25	; 0x0d
    1884:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8a 85       	ldd	r24, Y+10	; 0x0a
    1888:	9b 85       	ldd	r25, Y+11	; 0x0b
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9b 87       	std	Y+11, r25	; 0x0b
    188e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8a 85       	ldd	r24, Y+10	; 0x0a
    1892:	9b 85       	ldd	r25, Y+11	; 0x0b
    1894:	89 2b       	or	r24, r25
    1896:	69 f7       	brne	.-38     	; 0x1872 <APP_mainMenu+0xd4>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <APP_mainMenu+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	6e 81       	ldd	r22, Y+6	; 0x06
    189c:	7f 81       	ldd	r23, Y+7	; 0x07
    189e:	88 85       	ldd	r24, Y+8	; 0x08
    18a0:	99 85       	ldd	r25, Y+9	; 0x09
    18a2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9b 87       	std	Y+11, r25	; 0x0b
    18ac:	8a 87       	std	Y+10, r24	; 0x0a
    18ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b2:	9f 87       	std	Y+15, r25	; 0x0f
    18b4:	8e 87       	std	Y+14, r24	; 0x0e
    18b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <APP_mainMenu+0x11c>
    18be:	9f 87       	std	Y+15, r25	; 0x0f
    18c0:	8e 87       	std	Y+14, r24	; 0x0e
                _delay_ms(200);

                if (key == '+')
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	8b 32       	cpi	r24, 0x2B	; 43
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <APP_mainMenu+0x132>
                {
                    /* Change status to LOGIN_DOOR_OPEN if '+' key is pressed */
                    g_status = LOGIN_DOOR_OPEN;
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_status>
                    break;
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <APP_mainMenu+0x144>
                }
                else if (key == '-')
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	8d 32       	cpi	r24, 0x2D	; 45
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <APP_mainMenu+0x13a>
    18d6:	7b cf       	rjmp	.-266    	; 0x17ce <APP_mainMenu+0x30>
                {
                    /* Change status to LOGIN_CHANGE_PASS if '-' key is pressed */
                    g_status = LOGIN_CHANGE_PASS;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_status>
                    break;
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <APP_mainMenu+0x144>
        while (1)
        {
            /* Check if the status has changed */
            if (g_status != MAIN)
            {
                break;
    18e0:	00 00       	nop
                    /* Do nothing if any other key is pressed */
                }
            }
        }
    }
}
    18e2:	00 00       	nop
    18e4:	2f 96       	adiw	r28, 0x0f	; 15
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <APP_checkPassword>:

uint8 APP_checkPassword(uint8 password)
{
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <APP_checkPassword+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8a 83       	std	Y+2, r24	; 0x02
    uint8 retrieved_password;

    /* Request the password retrieval from the UART */
    UART_sendByte(CODE_RETREIVE_PASSWORD);
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_sendByte>

    /* Receive the retrieved password via UART */
    retrieved_password = UART_receiveByte();
    1908:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <UART_receiveByte>
    190c:	89 83       	std	Y+1, r24	; 0x01

    /* Check if the retrieved password matches the provided password */
    if (retrieved_password == password)
    190e:	99 81       	ldd	r25, Y+1	; 0x01
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	98 17       	cp	r25, r24
    1914:	11 f4       	brne	.+4      	; 0x191a <APP_checkPassword+0x24>
    {
        return 1; /* Password match */
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	01 c0       	rjmp	.+2      	; 0x191c <APP_checkPassword+0x26>
    }
    else
    {
        return 0; /* Password does not match */
    191a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <APP_keypadToVariable>:

void APP_keypadToVariable(uint8* variable)
{
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	61 97       	sbiw	r28, 0x11	; 17
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	99 8b       	std	Y+17, r25	; 0x11
    193c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key;
	while (1)
	{
		key = KEYPAD_getPressedKey(); /* Call function to get the pressed key */
    193e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <KEYPAD_getPressedKey>
    1942:	89 83       	std	Y+1, r24	; 0x01

        /* Check if the key is a number between 0 and 9 */
        if ((key <= 9 && key >= 0))
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	8a 30       	cpi	r24, 0x0A	; 10
    1948:	a8 f4       	brcc	.+42     	; 0x1974 <APP_keypadToVariable+0x4e>
        {
            /* Update the variable with the new digit */
            *variable = ((*variable * 10) + key);
    194a:	88 89       	ldd	r24, Y+16	; 0x10
    194c:	99 89       	ldd	r25, Y+17	; 0x11
    194e:	fc 01       	movw	r30, r24
    1950:	90 81       	ld	r25, Z
    1952:	89 2f       	mov	r24, r25
    1954:	88 0f       	add	r24, r24
    1956:	88 0f       	add	r24, r24
    1958:	89 0f       	add	r24, r25
    195a:	88 0f       	add	r24, r24
    195c:	98 2f       	mov	r25, r24
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	29 2f       	mov	r18, r25
    1962:	28 0f       	add	r18, r24
    1964:	88 89       	ldd	r24, Y+16	; 0x10
    1966:	99 89       	ldd	r25, Y+17	; 0x11
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18

            /* Display '*' on the LCD for each digit entered */
            LCD_displayCharacter('*');
    196c:	8a e2       	ldi	r24, 0x2A	; 42
    196e:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_displayCharacter>
    1972:	21 c0       	rjmp	.+66     	; 0x19b6 <APP_keypadToVariable+0x90>
        }

        /* Handler for use of '=' button, returns to the caller function */
        else if (key == '=' && *variable != 0)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8d 33       	cpi	r24, 0x3D	; 61
    1978:	39 f4       	brne	.+14     	; 0x1988 <APP_keypadToVariable+0x62>
    197a:	88 89       	ldd	r24, Y+16	; 0x10
    197c:	99 89       	ldd	r25, Y+17	; 0x11
    197e:	fc 01       	movw	r30, r24
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	09 f0       	breq	.+2      	; 0x1988 <APP_keypadToVariable+0x62>
    1986:	8a c0       	rjmp	.+276    	; 0x1a9c <APP_keypadToVariable+0x176>
        {
            break;
        }

        /* Handler for 'Enter' key (ASCII 13), resets the variable and clears LCD */
        else if (key == 13 && *variable != 0)
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	8d 30       	cpi	r24, 0x0D	; 13
    198c:	a1 f4       	brne	.+40     	; 0x19b6 <APP_keypadToVariable+0x90>
    198e:	88 89       	ldd	r24, Y+16	; 0x10
    1990:	99 89       	ldd	r25, Y+17	; 0x11
    1992:	fc 01       	movw	r30, r24
    1994:	80 81       	ld	r24, Z
    1996:	88 23       	and	r24, r24
    1998:	71 f0       	breq	.+28     	; 0x19b6 <APP_keypadToVariable+0x90>
        {
            *variable = 0;
    199a:	88 89       	ldd	r24, Y+16	; 0x10
    199c:	99 89       	ldd	r25, Y+17	; 0x11
    199e:	fc 01       	movw	r30, r24
    19a0:	10 82       	st	Z, r1

            /* Clear the LCD display */
            LCD_displayStringRowColumn(1, 0, "             ");
    19a2:	4a e3       	ldi	r20, 0x3A	; 58
    19a4:	51 e0       	ldi	r21, 0x01	; 1
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_displayStringRowColumn>
            LCD_moveCursor(1, 0);
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_moveCursor>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	af ea       	ldi	r26, 0xAF	; 175
    19bc:	b3 e4       	ldi	r27, 0x43	; 67
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	ac 83       	std	Y+4, r26	; 0x04
    19c4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a ef       	ldi	r20, 0xFA	; 250
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	6a 81       	ldd	r22, Y+2	; 0x02
    19d0:	7b 81       	ldd	r23, Y+3	; 0x03
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8e 83       	std	Y+6, r24	; 0x06
    19e0:	9f 83       	std	Y+7, r25	; 0x07
    19e2:	a8 87       	std	Y+8, r26	; 0x08
    19e4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	6e 81       	ldd	r22, Y+6	; 0x06
    19f0:	7f 81       	ldd	r23, Y+7	; 0x07
    19f2:	88 85       	ldd	r24, Y+8	; 0x08
    19f4:	99 85       	ldd	r25, Y+9	; 0x09
    19f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <APP_keypadToVariable+0xe2>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9b 87       	std	Y+11, r25	; 0x0b
    1a04:	8a 87       	std	Y+10, r24	; 0x0a
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <APP_keypadToVariable+0x160>
	else if (__tmp > 65535)
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	6e 81       	ldd	r22, Y+6	; 0x06
    1a12:	7f 81       	ldd	r23, Y+7	; 0x07
    1a14:	88 85       	ldd	r24, Y+8	; 0x08
    1a16:	99 85       	ldd	r25, Y+9	; 0x09
    1a18:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__gesf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <APP_keypadToVariable+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	6a 81       	ldd	r22, Y+2	; 0x02
    1a2a:	7b 81       	ldd	r23, Y+3	; 0x03
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9b 87       	std	Y+11, r25	; 0x0b
    1a46:	8a 87       	std	Y+10, r24	; 0x0a
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <APP_keypadToVariable+0x142>
    1a4a:	88 ec       	ldi	r24, 0xC8	; 200
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9d 87       	std	Y+13, r25	; 0x0d
    1a50:	8c 87       	std	Y+12, r24	; 0x0c
    1a52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <APP_keypadToVariable+0x130>
    1a5a:	9d 87       	std	Y+13, r25	; 0x0d
    1a5c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9b 87       	std	Y+11, r25	; 0x0b
    1a66:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6c:	89 2b       	or	r24, r25
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <APP_keypadToVariable+0x124>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <APP_keypadToVariable+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6e 81       	ldd	r22, Y+6	; 0x06
    1a74:	7f 81       	ldd	r23, Y+7	; 0x07
    1a76:	88 85       	ldd	r24, Y+8	; 0x08
    1a78:	99 85       	ldd	r25, Y+9	; 0x09
    1a7a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9b 87       	std	Y+11, r25	; 0x0b
    1a84:	8a 87       	std	Y+10, r24	; 0x0a
    1a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8a:	9f 87       	std	Y+15, r25	; 0x0f
    1a8c:	8e 87       	std	Y+14, r24	; 0x0e
    1a8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a90:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <APP_keypadToVariable+0x16c>
    1a96:	9f 87       	std	Y+15, r25	; 0x0f
    1a98:	8e 87       	std	Y+14, r24	; 0x0e
void APP_keypadToVariable(uint8* variable)
{
	uint8 key;
	while (1)
	{
		key = KEYPAD_getPressedKey(); /* Call function to get the pressed key */
    1a9a:	51 cf       	rjmp	.-350    	; 0x193e <APP_keypadToVariable+0x18>
            LCD_moveCursor(1, 0);
        }
        /* Delay for de-bouncing */
        _delay_ms(350);
	}
}
    1a9c:	00 00       	nop
    1a9e:	61 96       	adiw	r28, 0x11	; 17
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <APP_deinit_passwords>:

void APP_deinit_passwords(void)
{
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    /* Reset the password status to indicate no password is set */
    g_passwordIsSet = False;
    1ab8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <g_passwordIsSet>

    /* Clear the new password */
    g_new_password = 0;
    1abc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <g_new_password>

    /* Clear the confirmed password */
    g_confirm_password = 0;
    1ac0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <g_confirm_password>
}
    1ac4:	00 00       	nop
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <Timer_countTicks>:
/*******************************************************************************
 *                              Timer Functions                                *
 *******************************************************************************/

void Timer_countTicks(void)
{
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    1ad4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ticks>
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ticks>
}
    1ade:	00 00       	nop
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	08 95       	ret

00001ae6 <Timer_delaySeconds>:

void Timer_delaySeconds(uint16 seconds)
{
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <Timer_delaySeconds+0x6>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&timer_config);
    1af4:	8a e7       	ldi	r24, 0x7A	; 122
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 28 02 	call	0x450	; 0x450 <Timer1_init>
	while(ticks != seconds);
    1afc:	00 00       	nop
    1afe:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ticks>
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	b9 f7       	brne	.-18     	; 0x1afe <Timer_delaySeconds+0x18>
	Timer1_deinit();
    1b10:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Timer1_deinit>
	ticks = 0;
    1b14:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ticks>
}
    1b18:	00 00       	nop
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <__udivmodsi4>:
    1b24:	a1 e2       	ldi	r26, 0x21	; 33
    1b26:	1a 2e       	mov	r1, r26
    1b28:	aa 1b       	sub	r26, r26
    1b2a:	bb 1b       	sub	r27, r27
    1b2c:	fd 01       	movw	r30, r26
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <__udivmodsi4_ep>

00001b30 <__udivmodsi4_loop>:
    1b30:	aa 1f       	adc	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	ee 1f       	adc	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	a2 17       	cp	r26, r18
    1b3a:	b3 07       	cpc	r27, r19
    1b3c:	e4 07       	cpc	r30, r20
    1b3e:	f5 07       	cpc	r31, r21
    1b40:	20 f0       	brcs	.+8      	; 0x1b4a <__udivmodsi4_ep>
    1b42:	a2 1b       	sub	r26, r18
    1b44:	b3 0b       	sbc	r27, r19
    1b46:	e4 0b       	sbc	r30, r20
    1b48:	f5 0b       	sbc	r31, r21

00001b4a <__udivmodsi4_ep>:
    1b4a:	66 1f       	adc	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 1f       	adc	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	1a 94       	dec	r1
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <__udivmodsi4_loop>
    1b56:	60 95       	com	r22
    1b58:	70 95       	com	r23
    1b5a:	80 95       	com	r24
    1b5c:	90 95       	com	r25
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	bd 01       	movw	r22, r26
    1b64:	cf 01       	movw	r24, r30
    1b66:	08 95       	ret

00001b68 <__tablejump2__>:
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	05 90       	lpm	r0, Z+
    1b6e:	f4 91       	lpm	r31, Z
    1b70:	e0 2d       	mov	r30, r0
    1b72:	09 94       	ijmp

00001b74 <__cmpsf2>:
    1b74:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__fp_cmp>
    1b78:	08 f4       	brcc	.+2      	; 0x1b7c <__cmpsf2+0x8>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	08 95       	ret

00001b7e <__fixunssfsi>:
    1b7e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__fp_splitA>
    1b82:	88 f0       	brcs	.+34     	; 0x1ba6 <__fixunssfsi+0x28>
    1b84:	9f 57       	subi	r25, 0x7F	; 127
    1b86:	98 f0       	brcs	.+38     	; 0x1bae <__fixunssfsi+0x30>
    1b88:	b9 2f       	mov	r27, r25
    1b8a:	99 27       	eor	r25, r25
    1b8c:	b7 51       	subi	r27, 0x17	; 23
    1b8e:	b0 f0       	brcs	.+44     	; 0x1bbc <__fixunssfsi+0x3e>
    1b90:	e1 f0       	breq	.+56     	; 0x1bca <__fixunssfsi+0x4c>
    1b92:	66 0f       	add	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	88 1f       	adc	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	1a f0       	brmi	.+6      	; 0x1ba2 <__fixunssfsi+0x24>
    1b9c:	ba 95       	dec	r27
    1b9e:	c9 f7       	brne	.-14     	; 0x1b92 <__fixunssfsi+0x14>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <__fixunssfsi+0x4c>
    1ba2:	b1 30       	cpi	r27, 0x01	; 1
    1ba4:	91 f0       	breq	.+36     	; 0x1bca <__fixunssfsi+0x4c>
    1ba6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__fp_zero>
    1baa:	b1 e0       	ldi	r27, 0x01	; 1
    1bac:	08 95       	ret
    1bae:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__fp_zero>
    1bb2:	67 2f       	mov	r22, r23
    1bb4:	78 2f       	mov	r23, r24
    1bb6:	88 27       	eor	r24, r24
    1bb8:	b8 5f       	subi	r27, 0xF8	; 248
    1bba:	39 f0       	breq	.+14     	; 0x1bca <__fixunssfsi+0x4c>
    1bbc:	b9 3f       	cpi	r27, 0xF9	; 249
    1bbe:	cc f3       	brlt	.-14     	; 0x1bb2 <__fixunssfsi+0x34>
    1bc0:	86 95       	lsr	r24
    1bc2:	77 95       	ror	r23
    1bc4:	67 95       	ror	r22
    1bc6:	b3 95       	inc	r27
    1bc8:	d9 f7       	brne	.-10     	; 0x1bc0 <__fixunssfsi+0x42>
    1bca:	3e f4       	brtc	.+14     	; 0x1bda <__fixunssfsi+0x5c>
    1bcc:	90 95       	com	r25
    1bce:	80 95       	com	r24
    1bd0:	70 95       	com	r23
    1bd2:	61 95       	neg	r22
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	08 95       	ret

00001bdc <__fp_cmp>:
    1bdc:	99 0f       	add	r25, r25
    1bde:	00 08       	sbc	r0, r0
    1be0:	55 0f       	add	r21, r21
    1be2:	aa 0b       	sbc	r26, r26
    1be4:	e0 e8       	ldi	r30, 0x80	; 128
    1be6:	fe ef       	ldi	r31, 0xFE	; 254
    1be8:	16 16       	cp	r1, r22
    1bea:	17 06       	cpc	r1, r23
    1bec:	e8 07       	cpc	r30, r24
    1bee:	f9 07       	cpc	r31, r25
    1bf0:	c0 f0       	brcs	.+48     	; 0x1c22 <__fp_cmp+0x46>
    1bf2:	12 16       	cp	r1, r18
    1bf4:	13 06       	cpc	r1, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	98 f0       	brcs	.+38     	; 0x1c22 <__fp_cmp+0x46>
    1bfc:	62 1b       	sub	r22, r18
    1bfe:	73 0b       	sbc	r23, r19
    1c00:	84 0b       	sbc	r24, r20
    1c02:	95 0b       	sbc	r25, r21
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <__fp_cmp+0x38>
    1c06:	0a 26       	eor	r0, r26
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <__fp_cmp+0x46>
    1c0a:	23 2b       	or	r18, r19
    1c0c:	24 2b       	or	r18, r20
    1c0e:	25 2b       	or	r18, r21
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <__fp_cmp+0x3e>
    1c12:	08 95       	ret
    1c14:	0a 26       	eor	r0, r26
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <__fp_cmp+0x3e>
    1c18:	a1 40       	sbci	r26, 0x01	; 1
    1c1a:	a6 95       	lsr	r26
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	81 1d       	adc	r24, r1
    1c20:	81 1d       	adc	r24, r1
    1c22:	08 95       	ret

00001c24 <__fp_split3>:
    1c24:	57 fd       	sbrc	r21, 7
    1c26:	90 58       	subi	r25, 0x80	; 128
    1c28:	44 0f       	add	r20, r20
    1c2a:	55 1f       	adc	r21, r21
    1c2c:	59 f0       	breq	.+22     	; 0x1c44 <__fp_splitA+0x10>
    1c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c30:	71 f0       	breq	.+28     	; 0x1c4e <__fp_splitA+0x1a>
    1c32:	47 95       	ror	r20

00001c34 <__fp_splitA>:
    1c34:	88 0f       	add	r24, r24
    1c36:	97 fb       	bst	r25, 7
    1c38:	99 1f       	adc	r25, r25
    1c3a:	61 f0       	breq	.+24     	; 0x1c54 <__fp_splitA+0x20>
    1c3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c3e:	79 f0       	breq	.+30     	; 0x1c5e <__fp_splitA+0x2a>
    1c40:	87 95       	ror	r24
    1c42:	08 95       	ret
    1c44:	12 16       	cp	r1, r18
    1c46:	13 06       	cpc	r1, r19
    1c48:	14 06       	cpc	r1, r20
    1c4a:	55 1f       	adc	r21, r21
    1c4c:	f2 cf       	rjmp	.-28     	; 0x1c32 <__fp_split3+0xe>
    1c4e:	46 95       	lsr	r20
    1c50:	f1 df       	rcall	.-30     	; 0x1c34 <__fp_splitA>
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <__fp_splitA+0x30>
    1c54:	16 16       	cp	r1, r22
    1c56:	17 06       	cpc	r1, r23
    1c58:	18 06       	cpc	r1, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	f1 cf       	rjmp	.-30     	; 0x1c40 <__fp_splitA+0xc>
    1c5e:	86 95       	lsr	r24
    1c60:	71 05       	cpc	r23, r1
    1c62:	61 05       	cpc	r22, r1
    1c64:	08 94       	sec
    1c66:	08 95       	ret

00001c68 <__fp_zero>:
    1c68:	e8 94       	clt

00001c6a <__fp_szero>:
    1c6a:	bb 27       	eor	r27, r27
    1c6c:	66 27       	eor	r22, r22
    1c6e:	77 27       	eor	r23, r23
    1c70:	cb 01       	movw	r24, r22
    1c72:	97 f9       	bld	r25, 7
    1c74:	08 95       	ret

00001c76 <__gesf2>:
    1c76:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__fp_cmp>
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <__gesf2+0x8>
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	08 95       	ret

00001c80 <__mulsf3>:
    1c80:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3x>
    1c84:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_round>
    1c88:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_pscA>
    1c8c:	38 f0       	brcs	.+14     	; 0x1c9c <__mulsf3+0x1c>
    1c8e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_pscB>
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__mulsf3+0x1c>
    1c94:	95 23       	and	r25, r21
    1c96:	11 f0       	breq	.+4      	; 0x1c9c <__mulsf3+0x1c>
    1c98:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1c9c:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_nan>
    1ca0:	11 24       	eor	r1, r1
    1ca2:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__fp_szero>

00001ca6 <__mulsf3x>:
    1ca6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__fp_split3>
    1caa:	70 f3       	brcs	.-36     	; 0x1c88 <__mulsf3+0x8>

00001cac <__mulsf3_pse>:
    1cac:	95 9f       	mul	r25, r21
    1cae:	c1 f3       	breq	.-16     	; 0x1ca0 <__mulsf3+0x20>
    1cb0:	95 0f       	add	r25, r21
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	55 1f       	adc	r21, r21
    1cb6:	62 9f       	mul	r22, r18
    1cb8:	f0 01       	movw	r30, r0
    1cba:	72 9f       	mul	r23, r18
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	f0 0d       	add	r31, r0
    1cc0:	b1 1d       	adc	r27, r1
    1cc2:	63 9f       	mul	r22, r19
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	f0 0d       	add	r31, r0
    1cc8:	b1 1d       	adc	r27, r1
    1cca:	aa 1f       	adc	r26, r26
    1ccc:	64 9f       	mul	r22, r20
    1cce:	66 27       	eor	r22, r22
    1cd0:	b0 0d       	add	r27, r0
    1cd2:	a1 1d       	adc	r26, r1
    1cd4:	66 1f       	adc	r22, r22
    1cd6:	82 9f       	mul	r24, r18
    1cd8:	22 27       	eor	r18, r18
    1cda:	b0 0d       	add	r27, r0
    1cdc:	a1 1d       	adc	r26, r1
    1cde:	62 1f       	adc	r22, r18
    1ce0:	73 9f       	mul	r23, r19
    1ce2:	b0 0d       	add	r27, r0
    1ce4:	a1 1d       	adc	r26, r1
    1ce6:	62 1f       	adc	r22, r18
    1ce8:	83 9f       	mul	r24, r19
    1cea:	a0 0d       	add	r26, r0
    1cec:	61 1d       	adc	r22, r1
    1cee:	22 1f       	adc	r18, r18
    1cf0:	74 9f       	mul	r23, r20
    1cf2:	33 27       	eor	r19, r19
    1cf4:	a0 0d       	add	r26, r0
    1cf6:	61 1d       	adc	r22, r1
    1cf8:	23 1f       	adc	r18, r19
    1cfa:	84 9f       	mul	r24, r20
    1cfc:	60 0d       	add	r22, r0
    1cfe:	21 1d       	adc	r18, r1
    1d00:	82 2f       	mov	r24, r18
    1d02:	76 2f       	mov	r23, r22
    1d04:	6a 2f       	mov	r22, r26
    1d06:	11 24       	eor	r1, r1
    1d08:	9f 57       	subi	r25, 0x7F	; 127
    1d0a:	50 40       	sbci	r21, 0x00	; 0
    1d0c:	9a f0       	brmi	.+38     	; 0x1d34 <__mulsf3_pse+0x88>
    1d0e:	f1 f0       	breq	.+60     	; 0x1d4c <__mulsf3_pse+0xa0>
    1d10:	88 23       	and	r24, r24
    1d12:	4a f0       	brmi	.+18     	; 0x1d26 <__mulsf3_pse+0x7a>
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	91 50       	subi	r25, 0x01	; 1
    1d22:	50 40       	sbci	r21, 0x00	; 0
    1d24:	a9 f7       	brne	.-22     	; 0x1d10 <__mulsf3_pse+0x64>
    1d26:	9e 3f       	cpi	r25, 0xFE	; 254
    1d28:	51 05       	cpc	r21, r1
    1d2a:	80 f0       	brcs	.+32     	; 0x1d4c <__mulsf3_pse+0xa0>
    1d2c:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1d30:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__fp_szero>
    1d34:	5f 3f       	cpi	r21, 0xFF	; 255
    1d36:	e4 f3       	brlt	.-8      	; 0x1d30 <__mulsf3_pse+0x84>
    1d38:	98 3e       	cpi	r25, 0xE8	; 232
    1d3a:	d4 f3       	brlt	.-12     	; 0x1d30 <__mulsf3_pse+0x84>
    1d3c:	86 95       	lsr	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	b7 95       	ror	r27
    1d44:	f7 95       	ror	r31
    1d46:	e7 95       	ror	r30
    1d48:	9f 5f       	subi	r25, 0xFF	; 255
    1d4a:	c1 f7       	brne	.-16     	; 0x1d3c <__mulsf3_pse+0x90>
    1d4c:	fe 2b       	or	r31, r30
    1d4e:	88 0f       	add	r24, r24
    1d50:	91 1d       	adc	r25, r1
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__fp_inf>:
    1d5a:	97 f9       	bld	r25, 7
    1d5c:	9f 67       	ori	r25, 0x7F	; 127
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <__fp_nan>:
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	80 ec       	ldi	r24, 0xC0	; 192
    1d6a:	08 95       	ret

00001d6c <__fp_pscA>:
    1d6c:	00 24       	eor	r0, r0
    1d6e:	0a 94       	dec	r0
    1d70:	16 16       	cp	r1, r22
    1d72:	17 06       	cpc	r1, r23
    1d74:	18 06       	cpc	r1, r24
    1d76:	09 06       	cpc	r0, r25
    1d78:	08 95       	ret

00001d7a <__fp_pscB>:
    1d7a:	00 24       	eor	r0, r0
    1d7c:	0a 94       	dec	r0
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	14 06       	cpc	r1, r20
    1d84:	05 06       	cpc	r0, r21
    1d86:	08 95       	ret

00001d88 <__fp_round>:
    1d88:	09 2e       	mov	r0, r25
    1d8a:	03 94       	inc	r0
    1d8c:	00 0c       	add	r0, r0
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <__fp_round+0xc>
    1d90:	88 23       	and	r24, r24
    1d92:	52 f0       	brmi	.+20     	; 0x1da8 <__fp_round+0x20>
    1d94:	bb 0f       	add	r27, r27
    1d96:	40 f4       	brcc	.+16     	; 0x1da8 <__fp_round+0x20>
    1d98:	bf 2b       	or	r27, r31
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <__fp_round+0x18>
    1d9c:	60 ff       	sbrs	r22, 0
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__fp_round+0x20>
    1da0:	6f 5f       	subi	r22, 0xFF	; 255
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	8f 4f       	sbci	r24, 0xFF	; 255
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <itoa>:
    1daa:	45 32       	cpi	r20, 0x25	; 37
    1dac:	51 05       	cpc	r21, r1
    1dae:	20 f4       	brcc	.+8      	; 0x1db8 <itoa+0xe>
    1db0:	42 30       	cpi	r20, 0x02	; 2
    1db2:	10 f0       	brcs	.+4      	; 0x1db8 <itoa+0xe>
    1db4:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__itoa_ncheck>
    1db8:	fb 01       	movw	r30, r22
    1dba:	10 82       	st	Z, r1
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	08 95       	ret

00001dc0 <__itoa_ncheck>:
    1dc0:	bb 27       	eor	r27, r27
    1dc2:	4a 30       	cpi	r20, 0x0A	; 10
    1dc4:	31 f4       	brne	.+12     	; 0x1dd2 <__itoa_ncheck+0x12>
    1dc6:	99 23       	and	r25, r25
    1dc8:	22 f4       	brpl	.+8      	; 0x1dd2 <__itoa_ncheck+0x12>
    1dca:	bd e2       	ldi	r27, 0x2D	; 45
    1dcc:	90 95       	com	r25
    1dce:	81 95       	neg	r24
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__utoa_common>

00001dd6 <__utoa_ncheck>:
    1dd6:	bb 27       	eor	r27, r27

00001dd8 <__utoa_common>:
    1dd8:	fb 01       	movw	r30, r22
    1dda:	55 27       	eor	r21, r21
    1ddc:	aa 27       	eor	r26, r26
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	aa 1f       	adc	r26, r26
    1de4:	a4 17       	cp	r26, r20
    1de6:	10 f0       	brcs	.+4      	; 0x1dec <__utoa_common+0x14>
    1de8:	a4 1b       	sub	r26, r20
    1dea:	83 95       	inc	r24
    1dec:	50 51       	subi	r21, 0x10	; 16
    1dee:	b9 f7       	brne	.-18     	; 0x1dde <__utoa_common+0x6>
    1df0:	a0 5d       	subi	r26, 0xD0	; 208
    1df2:	aa 33       	cpi	r26, 0x3A	; 58
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <__utoa_common+0x20>
    1df6:	a9 5d       	subi	r26, 0xD9	; 217
    1df8:	a1 93       	st	Z+, r26
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	79 f7       	brne	.-34     	; 0x1ddc <__utoa_common+0x4>
    1dfe:	b1 11       	cpse	r27, r1
    1e00:	b1 93       	st	Z+, r27
    1e02:	11 92       	st	Z+, r1
    1e04:	cb 01       	movw	r24, r22
    1e06:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <strrev>

00001e0a <strrev>:
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	67 2f       	mov	r22, r23
    1e10:	71 91       	ld	r23, Z+
    1e12:	77 23       	and	r23, r23
    1e14:	e1 f7       	brne	.-8      	; 0x1e0e <strrev+0x4>
    1e16:	32 97       	sbiw	r30, 0x02	; 2
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <strrev+0x18>
    1e1a:	7c 91       	ld	r23, X
    1e1c:	6d 93       	st	X+, r22
    1e1e:	70 83       	st	Z, r23
    1e20:	62 91       	ld	r22, -Z
    1e22:	ae 17       	cp	r26, r30
    1e24:	bf 07       	cpc	r27, r31
    1e26:	c8 f3       	brcs	.-14     	; 0x1e1a <strrev+0x10>
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>
